{"kind":"FETCH","data":{"headers":{"access-control-allow-origin":"*","connection":"close","content-length":"34138","content-type":"application/json","date":"Thu, 13 Feb 2025 10:47:02 GMT","server":"Werkzeug/3.1.3 Python/3.11.4"},"body":"ewogICJkYXRhIjogewogICAgImxhdGVzdCI6IHsKICAgICAgImNvbnRlbnQiOiB7CiAgICAgICAgImVuZ2xpc2giOiAiIyBFbmdsaXNoIFZlcnNpb25cbkFzIHdlIGxvb2sgdG93YXJkcyAyMDI1LCB0aGUgZml0bmVzcyBpbmR1c3RyeSBpcyBvbiB0aGUgYnJpbmsgb2YgdHJhbnNmb3JtYXRpdmUgY2hhbmdlcyBkcml2ZW4gYnkgZW1lcmdpbmcgdHJlbmRzLiBIZXJlIGFyZSB0aGUga2V5IGluc2lnaHRzIHNoYXBpbmcgdGhlIGZ1dHVyZSBvZiBmaXRuZXNzOlxuXG4xLiAqKkRpZ2l0YWwgRml0bmVzcyBhbmQgVmlydHVhbCBXb3Jrb3V0cyoqOiBUaGUgc3VyZ2UgaW4gZGlnaXRhbCBmaXRuZXNzIHBsYXRmb3JtcyBoYXMgcmVzaGFwZWQgb3VyIGVuZ2FnZW1lbnQgd2l0aCBleGVyY2lzZSwgd2l0aCB0aGUgZ2xvYmFsIG9ubGluZSBmaXRuZXNzIG1hcmtldCBleHBlY3RlZCB0byBoaXQgJDU5IGJpbGxpb24gYnkgMjAyNy4gVGhpcyBzaGlmdCBlbXBoYXNpemVzIGNvbnZlbmllbmNlIGFuZCBhY2Nlc3NpYmlsaXR5IGZvciBhbGwgZml0bmVzcyBlbnRodXNpYXN0cy5cblxuMi4gKipXZWFyYWJsZSBUZWNobm9sb2d5Kio6IFRoZSBkZW1hbmQgZm9yIHdlYXJhYmxlIGRldmljZXMgY29udGludWVzIHRvIHJpc2UsIG9mZmVyaW5nIHJlYWwtdGltZSBoZWFsdGggbWV0cmljcyB0aGF0IGVtcG93ZXIgdXNlcnMgdG8gdGFrZSBjb250cm9sIG9mIHRoZWlyIHdlbGxuZXNzLiBUaGUgd2VhcmFibGVzIG1hcmtldCBpcyBwcm9qZWN0ZWQgdG8gZ3JvdyB0byAkNjAgYmlsbGlvbiBieSAyMDIzLCByZWZsZWN0aW5nIHRoaXMgZ3Jvd2luZyB0cmVuZC5cblxuMy4gKipIb2xpc3RpYyBIZWFsdGggQXBwcm9hY2gqKjogQSBncm93aW5nIG51bWJlciBvZiBpbmRpdmlkdWFscyBhcmUgcmVjb2duaXppbmcgdGhlIGltcG9ydGFuY2Ugb2YgYSBob2xpc3RpYyBhcHByb2FjaCB0byBoZWFsdGguIEZpdG5lc3MgcHJvZ3JhbXMgaW5jb3Jwb3JhdGluZyBtaW5kZnVsbmVzcyBwcmFjdGljZXMgbGlrZSB5b2dhIGFuZCBtZWRpdGF0aW9uIGFyZSBnYWluaW5nIHRyYWN0aW9uLCByZXNwb25kaW5nIHRvIHRoZSBpbmNyZWFzaW5nIGRlbWFuZCBmb3Igb3ZlcmFsbCB3ZWxsLWJlaW5nLlxuXG40LiAqKlBlcnNvbmFsaXphdGlvbiBhbmQgQUkgaW4gRml0bmVzcyoqOiBUaGFua3MgdG8gYWR2YW5jZW1lbnRzIGluIEFJLCBwZXJzb25hbGl6ZWQgd29ya291dCBleHBlcmllbmNlcyBhcmUgYmVjb21pbmcgc3RhbmRhcmQuIEN1c3RvbWl6ZWQgcHJvZ3JhbXMgdGFpbG9yZWQgdG8gaW5kaXZpZHVhbCBnb2FscyBlbmhhbmNlIHVzZXIgZW5nYWdlbWVudCwgd2l0aCA3MCUgb2YgY29uc3VtZXJzIHByZWZlcnJpbmcgZml0bmVzcyBzb2x1dGlvbnMgdGhhdCBmZWVsIHBlcnNvbmFsbHkgcmVsZXZhbnQuXG5cbjUuICoqU3VzdGFpbmFiaWxpdHkgaW4gRml0bmVzcyoqOiBBcyBjb25zdW1lcnMgYmVjb21lIG1vcmUgZW52aXJvbm1lbnRhbGx5IGNvbnNjaW91cywgc3VzdGFpbmFiaWxpdHkgaXMgYXQgdGhlIGZvcmVmcm9udCBvZiB0aGUgZml0bmVzcyBpbmR1c3RyeS4gTWFueSBicmFuZHMgYXJlIGFkb3B0aW5nIGVjby1mcmllbmRseSBwcmFjdGljZXMsIHdpdGggNzMlIG9mIG1pbGxlbm5pYWxzIHdpbGxpbmcgdG8gcGF5IG1vcmUgZm9yIHN1c3RhaW5hYmxlIHByb2R1Y3RzLlxuXG42LiAqKkNvbW11bml0eSBhbmQgU29jaWFsIEZpdG5lc3MqKjogVGhlIGltcG9ydGFuY2Ugb2YgY29tbXVuaXR5IGluIGZpdG5lc3MgY2Fubm90IGJlIG92ZXJzdGF0ZWQuIEEgc2lnbmlmaWNhbnQgbWFqb3JpdHkgcHJlZmVyIGdyb3VwIHdvcmtvdXRzLCBoaWdobGlnaHRpbmcgdGhlIHZhbHVlIG9mIHNvY2lhbCBpbnRlcmFjdGlvbiBpbiBtYWludGFpbmluZyBmaXRuZXNzIGNvbW1pdG1lbnRzLlxuXG43LiAqKkZvY3VzIG9uIE1lbnRhbCBIZWFsdGgqKjogSW4gdGhlIHdha2Ugb2YgdGhlIENPVklELTE5IHBhbmRlbWljLCB0aGVyZSBpcyBhIGhlaWdodGVuZWQgZm9jdXMgb24gbWVudGFsIHdlbGxuZXNzIGluIGZpdG5lc3MgcHJvZ3JhbXMuIFJlc291cmNlcyBhZGRyZXNzaW5nIG1lbnRhbCBoZWFsdGggYW5kIHN0cmVzcyBtYW5hZ2VtZW50IGFyZSBiZWNvbWluZyBlc3NlbnRpYWwgY29tcG9uZW50cyBvZiBmaXRuZXNzIG9mZmVyaW5ncy5cblxuVGhlc2UgaW5zaWdodHMgcmVmbGVjdCBhIGR5bmFtaWMgc2hpZnQgaW4gdGhlIGZpdG5lc3MgbGFuZHNjYXBlLCBlbXBoYXNpemluZyBkaWdpdGFsIGludGVncmF0aW9uLCBwZXJzb25hbGl6YXRpb24sIHN1c3RhaW5hYmlsaXR5LCBhbmQgbWVudGFsIGhlYWx0aCBhd2FyZW5lc3MuIFRvZ2V0aGVyLCB0aGV5IHBhdmUgdGhlIHdheSBmb3IgYSBtb3JlIGluY2x1c2l2ZSBhbmQgZWZmZWN0aXZlIGZpdG5lc3MgZW52aXJvbm1lbnQgYnkgMjAyNS5cblxuLS0tXG5cbiMgRnJlbmNoIFZlcnNpb25cbkVuIG5vdXMgdG91cm5hbnQgdmVycyAyMDI1LCBsJ2luZHVzdHJpZSBkdSBmaXRuZXNzIGVzdCBzdXIgbGUgcG9pbnQgZGUgY29ubmFcdTAwZWV0cmUgZGVzIGNoYW5nZW1lbnRzIHRyYW5zZm9ybWF0ZXVycywgZ3VpZFx1MDBlOXMgcGFyIGRlcyB0ZW5kYW5jZXMgXHUwMGU5bWVyZ2VudGVzLiBWb2ljaSBsZXMgcHJpbmNpcGFsZXMgaWRcdTAwZTllcyBxdWkgZmFcdTAwZTdvbm5lbnQgbCdhdmVuaXIgZHUgZml0bmVzcyA6XG5cbjEuICoqRml0bmVzcyBOdW1cdTAwZTlyaXF1ZSBldCBFbnRyYVx1MDBlZW5lbWVudHMgVmlydHVlbHMqKiA6IEwnZXNzb3IgZGVzIHBsYXRlZm9ybWVzIGRlIGZpdG5lc3MgbnVtXHUwMGU5cmlxdWVzIGEgcmVkXHUwMGU5ZmluaSBub3RyZSBlbmdhZ2VtZW50IGVudmVycyBsJ2V4ZXJjaWNlLCBhdmVjIHVuIG1hcmNoXHUwMGU5IG1vbmRpYWwgZHUgZml0bmVzcyBlbiBsaWduZSBxdWkgZGV2cmFpdCBhdHRlaW5kcmUgNTkgbWlsbGlhcmRzIGRlIGRvbGxhcnMgZCdpY2kgMjAyNy4gQ2UgY2hhbmdlbWVudCBtZXQgbCdhY2NlbnQgc3VyIGxhIGNvbW1vZGl0XHUwMGU5IGV0IGwnYWNjZXNzaWJpbGl0XHUwMGU5IHBvdXIgdG91cyBsZXMgcGFzc2lvbm5cdTAwZTlzIGRlIGZpdG5lc3MuXG5cbjIuICoqVGVjaG5vbG9naWUgUG9ydGFibGUqKiA6IExhIGRlbWFuZGUgcG91ciBsZXMgZGlzcG9zaXRpZnMgcG9ydGFibGVzIGNvbnRpbnVlIGQnYXVnbWVudGVyLCBvZmZyYW50IGRlcyBtXHUwMGU5dHJpcXVlcyBkZSBzYW50XHUwMGU5IGVuIHRlbXBzIHJcdTAwZTllbCBxdWkgcGVybWV0dGVudCBhdXggdXRpbGlzYXRldXJzIGRlIHByZW5kcmUgbGUgY29udHJcdTAwZjRsZSBkZSBsZXVyIGJpZW4tXHUwMGVhdHJlLiBMZSBtYXJjaFx1MDBlOSBkZXMgd2VhcmFibGVzIGRldnJhaXQgYXR0ZWluZHJlIDYwIG1pbGxpYXJkcyBkZSBkb2xsYXJzIGQnaWNpIDIwMjMsIHJlZmxcdTAwZTl0YW50IGNldHRlIHRlbmRhbmNlIGNyb2lzc2FudGUuXG5cbjMuICoqQXBwcm9jaGUgSG9saXN0aXF1ZSBkZSBsYSBTYW50XHUwMGU5KiogOiBVbiBub21icmUgY3JvaXNzYW50IGQnaW5kaXZpZHVzIHJlY29ubmFcdTAwZWV0IGwnaW1wb3J0YW5jZSBkJ3VuZSBhcHByb2NoZSBob2xpc3RpcXVlIGRlIGxhIHNhbnRcdTAwZTkuIExlcyBwcm9ncmFtbWVzIGRlIGZpdG5lc3MgaW50XHUwMGU5Z3JhbnQgZGVzIHByYXRpcXVlcyBkZSBwbGVpbmUgY29uc2NpZW5jZSBjb21tZSBsZSB5b2dhIGV0IGxhIG1cdTAwZTlkaXRhdGlvbiBnYWduZW50IGVuIHBvcHVsYXJpdFx1MDBlOSwgclx1MDBlOXBvbmRhbnQgXHUwMGUwIGxhIGRlbWFuZGUgY3JvaXNzYW50ZSBkZSBiaWVuLVx1MDBlYXRyZSBnbG9iYWwuXG5cbjQuICoqUGVyc29ubmFsaXNhdGlvbiBldCBJQSBkYW5zIGxlIEZpdG5lc3MqKiA6IEdyXHUwMGUyY2UgYXV4IGF2YW5jXHUwMGU5ZXMgZGUgbCdJQSwgbGVzIGV4cFx1MDBlOXJpZW5jZXMgZCdlbnRyYVx1MDBlZW5lbWVudCBwZXJzb25uYWxpc1x1MDBlOWVzIGRldmllbm5lbnQgbGEgbm9ybWUuIExlcyBwcm9ncmFtbWVzIHN1ciBtZXN1cmUgYWRhcHRcdTAwZTlzIGF1eCBvYmplY3RpZnMgaW5kaXZpZHVlbHMgYW1cdTAwZTlsaW9yZW50IGwnZW5nYWdlbWVudCBkZXMgdXRpbGlzYXRldXJzLCA3MCUgZGVzIGNvbnNvbW1hdGV1cnMgcHJcdTAwZTlmXHUwMGU5cmFudCBkZXMgc29sdXRpb25zIGRlIGZpdG5lc3MgcXVpIGxldXIgc2VtYmxlbnQgcGVyc29ubmVsbGVtZW50IHBlcnRpbmVudGVzLlxuXG41LiAqKkR1cmFiaWxpdFx1MDBlOSBkYW5zIGxlIEZpdG5lc3MqKiA6IEF2ZWMgdW5lIHByaXNlIGRlIGNvbnNjaWVuY2UgZW52aXJvbm5lbWVudGFsZSBjcm9pc3NhbnRlLCBsYSBkdXJhYmlsaXRcdTAwZTkgZXN0IGF1IGNcdTAxNTN1ciBkZSBsJ2luZHVzdHJpZSBkdSBmaXRuZXNzLiBEZSBub21icmV1c2VzIG1hcnF1ZXMgYWRvcHRlbnQgZGVzIHByYXRpcXVlcyByZXNwZWN0dWV1c2VzIGRlIGwnZW52aXJvbm5lbWVudCwgNzMgJSBkZXMgbWlsbGVubmlhbHMgXHUwMGU5dGFudCBwclx1MDBlYXRzIFx1MDBlMCBwYXllciBwbHVzIHBvdXIgZGVzIHByb2R1aXRzIGR1cmFibGVzLlxuXG42LiAqKkNvbW11bmF1dFx1MDBlOSBldCBGaXRuZXNzIFNvY2lhbCoqIDogTCdpbXBvcnRhbmNlIGRlIGxhIGNvbW11bmF1dFx1MDBlOSBkYW5zIGxlIGZpdG5lc3MgbmUgcGV1dCBcdTAwZWF0cmUgc291cy1lc3RpbVx1MDBlOWUuIFVuZSBtYWpvcml0XHUwMGU5IHNpZ25pZmljYXRpdmUgcHJcdTAwZTlmXHUwMGU4cmUgbGVzIGVudHJhXHUwMGVlbmVtZW50cyBlbiBncm91cGUsIHNvdWxpZ25hbnQgbGEgdmFsZXVyIGRlIGwnaW50ZXJhY3Rpb24gc29jaWFsZSBwb3VyIG1haW50ZW5pciBkZXMgZW5nYWdlbWVudHMgZW4gbWF0aVx1MDBlOHJlIGRlIGZpdG5lc3MuXG5cbjcuICoqQ29uY2VudHJhdGlvbiBzdXIgbGEgU2FudFx1MDBlOSBNZW50YWxlKiogOiBcdTAwYzAgbGEgc3VpdGUgZGUgbGEgcGFuZFx1MDBlOW1pZSBkZSBDT1ZJRC0xOSwgbCdhY2NlbnQgYSBcdTAwZTl0XHUwMGU5IG1pcyBzdXIgbGUgYmllbi1cdTAwZWF0cmUgbWVudGFsIGRhbnMgbGVzIHByb2dyYW1tZXMgZGUgZml0bmVzcy4gTGVzIHJlc3NvdXJjZXMgYWJvcmRhbnQgbGEgc2FudFx1MDBlOSBtZW50YWxlIGV0IGxhIGdlc3Rpb24gZHUgc3RyZXNzIGRldmllbm5lbnQgZGVzIFx1MDBlOWxcdTAwZTltZW50cyBlc3NlbnRpZWxzIGRlcyBvZmZyZXMgZGUgZml0bmVzcy5cblxuQ2VzIGlkXHUwMGU5ZXMgcmVmbFx1MDBlOHRlbnQgdW4gY2hhbmdlbWVudCBkeW5hbWlxdWUgZGFucyBsZSBwYXlzYWdlIGR1IGZpdG5lc3MsIG1ldHRhbnQgbCdhY2NlbnQgc3VyIGwnaW50XHUwMGU5Z3JhdGlvbiBudW1cdTAwZTlyaXF1ZSwgbGEgcGVyc29ubmFsaXNhdGlvbiwgbGEgZHVyYWJpbGl0XHUwMGU5IGV0IGxhIHNlbnNpYmlsaXNhdGlvbiBcdTAwZTAgbGEgc2FudFx1MDBlOSBtZW50YWxlLiBFbnNlbWJsZSwgZWxsZXMgb3V2cmVudCBsYSB2b2llIFx1MDBlMCB1biBlbnZpcm9ubmVtZW50IGRlIGZpdG5lc3MgcGx1cyBpbmNsdXNpZiBldCBlZmZpY2FjZSBkJ2ljaSAyMDI1LiIsCiAgICAgICAgImZyZW5jaCI6ICIiCiAgICAgIH0sCiAgICAgICJjcmVhdGVkIjogIjIwMjUwMjEzXzExMDgzNCIsCiAgICAgICJmaWxlbmFtZSI6ICJsaW5rZWRpbl9wb3N0XzIwMjUwMjEzXzExMDgzNC5tZCIsCiAgICAgICJ0b3BpYyI6ICJUZW5kYW5jZXMgMjAyNSBGaXRuZXNzIgogICAgfSwKICAgICJwb3N0cyI6IFsKICAgICAgewogICAgICAgICJjb250ZW50IjogewogICAgICAgICAgImVuZ2xpc2giOiAiIyBFbmdsaXNoIFZlcnNpb25cbkFzIHdlIGxvb2sgdG93YXJkcyAyMDI1LCB0aGUgZml0bmVzcyBpbmR1c3RyeSBpcyBvbiB0aGUgYnJpbmsgb2YgdHJhbnNmb3JtYXRpdmUgY2hhbmdlcyBkcml2ZW4gYnkgZW1lcmdpbmcgdHJlbmRzLiBIZXJlIGFyZSB0aGUga2V5IGluc2lnaHRzIHNoYXBpbmcgdGhlIGZ1dHVyZSBvZiBmaXRuZXNzOlxuXG4xLiAqKkRpZ2l0YWwgRml0bmVzcyBhbmQgVmlydHVhbCBXb3Jrb3V0cyoqOiBUaGUgc3VyZ2UgaW4gZGlnaXRhbCBmaXRuZXNzIHBsYXRmb3JtcyBoYXMgcmVzaGFwZWQgb3VyIGVuZ2FnZW1lbnQgd2l0aCBleGVyY2lzZSwgd2l0aCB0aGUgZ2xvYmFsIG9ubGluZSBmaXRuZXNzIG1hcmtldCBleHBlY3RlZCB0byBoaXQgJDU5IGJpbGxpb24gYnkgMjAyNy4gVGhpcyBzaGlmdCBlbXBoYXNpemVzIGNvbnZlbmllbmNlIGFuZCBhY2Nlc3NpYmlsaXR5IGZvciBhbGwgZml0bmVzcyBlbnRodXNpYXN0cy5cblxuMi4gKipXZWFyYWJsZSBUZWNobm9sb2d5Kio6IFRoZSBkZW1hbmQgZm9yIHdlYXJhYmxlIGRldmljZXMgY29udGludWVzIHRvIHJpc2UsIG9mZmVyaW5nIHJlYWwtdGltZSBoZWFsdGggbWV0cmljcyB0aGF0IGVtcG93ZXIgdXNlcnMgdG8gdGFrZSBjb250cm9sIG9mIHRoZWlyIHdlbGxuZXNzLiBUaGUgd2VhcmFibGVzIG1hcmtldCBpcyBwcm9qZWN0ZWQgdG8gZ3JvdyB0byAkNjAgYmlsbGlvbiBieSAyMDIzLCByZWZsZWN0aW5nIHRoaXMgZ3Jvd2luZyB0cmVuZC5cblxuMy4gKipIb2xpc3RpYyBIZWFsdGggQXBwcm9hY2gqKjogQSBncm93aW5nIG51bWJlciBvZiBpbmRpdmlkdWFscyBhcmUgcmVjb2duaXppbmcgdGhlIGltcG9ydGFuY2Ugb2YgYSBob2xpc3RpYyBhcHByb2FjaCB0byBoZWFsdGguIEZpdG5lc3MgcHJvZ3JhbXMgaW5jb3Jwb3JhdGluZyBtaW5kZnVsbmVzcyBwcmFjdGljZXMgbGlrZSB5b2dhIGFuZCBtZWRpdGF0aW9uIGFyZSBnYWluaW5nIHRyYWN0aW9uLCByZXNwb25kaW5nIHRvIHRoZSBpbmNyZWFzaW5nIGRlbWFuZCBmb3Igb3ZlcmFsbCB3ZWxsLWJlaW5nLlxuXG40LiAqKlBlcnNvbmFsaXphdGlvbiBhbmQgQUkgaW4gRml0bmVzcyoqOiBUaGFua3MgdG8gYWR2YW5jZW1lbnRzIGluIEFJLCBwZXJzb25hbGl6ZWQgd29ya291dCBleHBlcmllbmNlcyBhcmUgYmVjb21pbmcgc3RhbmRhcmQuIEN1c3RvbWl6ZWQgcHJvZ3JhbXMgdGFpbG9yZWQgdG8gaW5kaXZpZHVhbCBnb2FscyBlbmhhbmNlIHVzZXIgZW5nYWdlbWVudCwgd2l0aCA3MCUgb2YgY29uc3VtZXJzIHByZWZlcnJpbmcgZml0bmVzcyBzb2x1dGlvbnMgdGhhdCBmZWVsIHBlcnNvbmFsbHkgcmVsZXZhbnQuXG5cbjUuICoqU3VzdGFpbmFiaWxpdHkgaW4gRml0bmVzcyoqOiBBcyBjb25zdW1lcnMgYmVjb21lIG1vcmUgZW52aXJvbm1lbnRhbGx5IGNvbnNjaW91cywgc3VzdGFpbmFiaWxpdHkgaXMgYXQgdGhlIGZvcmVmcm9udCBvZiB0aGUgZml0bmVzcyBpbmR1c3RyeS4gTWFueSBicmFuZHMgYXJlIGFkb3B0aW5nIGVjby1mcmllbmRseSBwcmFjdGljZXMsIHdpdGggNzMlIG9mIG1pbGxlbm5pYWxzIHdpbGxpbmcgdG8gcGF5IG1vcmUgZm9yIHN1c3RhaW5hYmxlIHByb2R1Y3RzLlxuXG42LiAqKkNvbW11bml0eSBhbmQgU29jaWFsIEZpdG5lc3MqKjogVGhlIGltcG9ydGFuY2Ugb2YgY29tbXVuaXR5IGluIGZpdG5lc3MgY2Fubm90IGJlIG92ZXJzdGF0ZWQuIEEgc2lnbmlmaWNhbnQgbWFqb3JpdHkgcHJlZmVyIGdyb3VwIHdvcmtvdXRzLCBoaWdobGlnaHRpbmcgdGhlIHZhbHVlIG9mIHNvY2lhbCBpbnRlcmFjdGlvbiBpbiBtYWludGFpbmluZyBmaXRuZXNzIGNvbW1pdG1lbnRzLlxuXG43LiAqKkZvY3VzIG9uIE1lbnRhbCBIZWFsdGgqKjogSW4gdGhlIHdha2Ugb2YgdGhlIENPVklELTE5IHBhbmRlbWljLCB0aGVyZSBpcyBhIGhlaWdodGVuZWQgZm9jdXMgb24gbWVudGFsIHdlbGxuZXNzIGluIGZpdG5lc3MgcHJvZ3JhbXMuIFJlc291cmNlcyBhZGRyZXNzaW5nIG1lbnRhbCBoZWFsdGggYW5kIHN0cmVzcyBtYW5hZ2VtZW50IGFyZSBiZWNvbWluZyBlc3NlbnRpYWwgY29tcG9uZW50cyBvZiBmaXRuZXNzIG9mZmVyaW5ncy5cblxuVGhlc2UgaW5zaWdodHMgcmVmbGVjdCBhIGR5bmFtaWMgc2hpZnQgaW4gdGhlIGZpdG5lc3MgbGFuZHNjYXBlLCBlbXBoYXNpemluZyBkaWdpdGFsIGludGVncmF0aW9uLCBwZXJzb25hbGl6YXRpb24sIHN1c3RhaW5hYmlsaXR5LCBhbmQgbWVudGFsIGhlYWx0aCBhd2FyZW5lc3MuIFRvZ2V0aGVyLCB0aGV5IHBhdmUgdGhlIHdheSBmb3IgYSBtb3JlIGluY2x1c2l2ZSBhbmQgZWZmZWN0aXZlIGZpdG5lc3MgZW52aXJvbm1lbnQgYnkgMjAyNS5cblxuLS0tXG5cbiMgRnJlbmNoIFZlcnNpb25cbkVuIG5vdXMgdG91cm5hbnQgdmVycyAyMDI1LCBsJ2luZHVzdHJpZSBkdSBmaXRuZXNzIGVzdCBzdXIgbGUgcG9pbnQgZGUgY29ubmFcdTAwZWV0cmUgZGVzIGNoYW5nZW1lbnRzIHRyYW5zZm9ybWF0ZXVycywgZ3VpZFx1MDBlOXMgcGFyIGRlcyB0ZW5kYW5jZXMgXHUwMGU5bWVyZ2VudGVzLiBWb2ljaSBsZXMgcHJpbmNpcGFsZXMgaWRcdTAwZTllcyBxdWkgZmFcdTAwZTdvbm5lbnQgbCdhdmVuaXIgZHUgZml0bmVzcyA6XG5cbjEuICoqRml0bmVzcyBOdW1cdTAwZTlyaXF1ZSBldCBFbnRyYVx1MDBlZW5lbWVudHMgVmlydHVlbHMqKiA6IEwnZXNzb3IgZGVzIHBsYXRlZm9ybWVzIGRlIGZpdG5lc3MgbnVtXHUwMGU5cmlxdWVzIGEgcmVkXHUwMGU5ZmluaSBub3RyZSBlbmdhZ2VtZW50IGVudmVycyBsJ2V4ZXJjaWNlLCBhdmVjIHVuIG1hcmNoXHUwMGU5IG1vbmRpYWwgZHUgZml0bmVzcyBlbiBsaWduZSBxdWkgZGV2cmFpdCBhdHRlaW5kcmUgNTkgbWlsbGlhcmRzIGRlIGRvbGxhcnMgZCdpY2kgMjAyNy4gQ2UgY2hhbmdlbWVudCBtZXQgbCdhY2NlbnQgc3VyIGxhIGNvbW1vZGl0XHUwMGU5IGV0IGwnYWNjZXNzaWJpbGl0XHUwMGU5IHBvdXIgdG91cyBsZXMgcGFzc2lvbm5cdTAwZTlzIGRlIGZpdG5lc3MuXG5cbjIuICoqVGVjaG5vbG9naWUgUG9ydGFibGUqKiA6IExhIGRlbWFuZGUgcG91ciBsZXMgZGlzcG9zaXRpZnMgcG9ydGFibGVzIGNvbnRpbnVlIGQnYXVnbWVudGVyLCBvZmZyYW50IGRlcyBtXHUwMGU5dHJpcXVlcyBkZSBzYW50XHUwMGU5IGVuIHRlbXBzIHJcdTAwZTllbCBxdWkgcGVybWV0dGVudCBhdXggdXRpbGlzYXRldXJzIGRlIHByZW5kcmUgbGUgY29udHJcdTAwZjRsZSBkZSBsZXVyIGJpZW4tXHUwMGVhdHJlLiBMZSBtYXJjaFx1MDBlOSBkZXMgd2VhcmFibGVzIGRldnJhaXQgYXR0ZWluZHJlIDYwIG1pbGxpYXJkcyBkZSBkb2xsYXJzIGQnaWNpIDIwMjMsIHJlZmxcdTAwZTl0YW50IGNldHRlIHRlbmRhbmNlIGNyb2lzc2FudGUuXG5cbjMuICoqQXBwcm9jaGUgSG9saXN0aXF1ZSBkZSBsYSBTYW50XHUwMGU5KiogOiBVbiBub21icmUgY3JvaXNzYW50IGQnaW5kaXZpZHVzIHJlY29ubmFcdTAwZWV0IGwnaW1wb3J0YW5jZSBkJ3VuZSBhcHByb2NoZSBob2xpc3RpcXVlIGRlIGxhIHNhbnRcdTAwZTkuIExlcyBwcm9ncmFtbWVzIGRlIGZpdG5lc3MgaW50XHUwMGU5Z3JhbnQgZGVzIHByYXRpcXVlcyBkZSBwbGVpbmUgY29uc2NpZW5jZSBjb21tZSBsZSB5b2dhIGV0IGxhIG1cdTAwZTlkaXRhdGlvbiBnYWduZW50IGVuIHBvcHVsYXJpdFx1MDBlOSwgclx1MDBlOXBvbmRhbnQgXHUwMGUwIGxhIGRlbWFuZGUgY3JvaXNzYW50ZSBkZSBiaWVuLVx1MDBlYXRyZSBnbG9iYWwuXG5cbjQuICoqUGVyc29ubmFsaXNhdGlvbiBldCBJQSBkYW5zIGxlIEZpdG5lc3MqKiA6IEdyXHUwMGUyY2UgYXV4IGF2YW5jXHUwMGU5ZXMgZGUgbCdJQSwgbGVzIGV4cFx1MDBlOXJpZW5jZXMgZCdlbnRyYVx1MDBlZW5lbWVudCBwZXJzb25uYWxpc1x1MDBlOWVzIGRldmllbm5lbnQgbGEgbm9ybWUuIExlcyBwcm9ncmFtbWVzIHN1ciBtZXN1cmUgYWRhcHRcdTAwZTlzIGF1eCBvYmplY3RpZnMgaW5kaXZpZHVlbHMgYW1cdTAwZTlsaW9yZW50IGwnZW5nYWdlbWVudCBkZXMgdXRpbGlzYXRldXJzLCA3MCUgZGVzIGNvbnNvbW1hdGV1cnMgcHJcdTAwZTlmXHUwMGU5cmFudCBkZXMgc29sdXRpb25zIGRlIGZpdG5lc3MgcXVpIGxldXIgc2VtYmxlbnQgcGVyc29ubmVsbGVtZW50IHBlcnRpbmVudGVzLlxuXG41LiAqKkR1cmFiaWxpdFx1MDBlOSBkYW5zIGxlIEZpdG5lc3MqKiA6IEF2ZWMgdW5lIHByaXNlIGRlIGNvbnNjaWVuY2UgZW52aXJvbm5lbWVudGFsZSBjcm9pc3NhbnRlLCBsYSBkdXJhYmlsaXRcdTAwZTkgZXN0IGF1IGNcdTAxNTN1ciBkZSBsJ2luZHVzdHJpZSBkdSBmaXRuZXNzLiBEZSBub21icmV1c2VzIG1hcnF1ZXMgYWRvcHRlbnQgZGVzIHByYXRpcXVlcyByZXNwZWN0dWV1c2VzIGRlIGwnZW52aXJvbm5lbWVudCwgNzMgJSBkZXMgbWlsbGVubmlhbHMgXHUwMGU5dGFudCBwclx1MDBlYXRzIFx1MDBlMCBwYXllciBwbHVzIHBvdXIgZGVzIHByb2R1aXRzIGR1cmFibGVzLlxuXG42LiAqKkNvbW11bmF1dFx1MDBlOSBldCBGaXRuZXNzIFNvY2lhbCoqIDogTCdpbXBvcnRhbmNlIGRlIGxhIGNvbW11bmF1dFx1MDBlOSBkYW5zIGxlIGZpdG5lc3MgbmUgcGV1dCBcdTAwZWF0cmUgc291cy1lc3RpbVx1MDBlOWUuIFVuZSBtYWpvcml0XHUwMGU5IHNpZ25pZmljYXRpdmUgcHJcdTAwZTlmXHUwMGU4cmUgbGVzIGVudHJhXHUwMGVlbmVtZW50cyBlbiBncm91cGUsIHNvdWxpZ25hbnQgbGEgdmFsZXVyIGRlIGwnaW50ZXJhY3Rpb24gc29jaWFsZSBwb3VyIG1haW50ZW5pciBkZXMgZW5nYWdlbWVudHMgZW4gbWF0aVx1MDBlOHJlIGRlIGZpdG5lc3MuXG5cbjcuICoqQ29uY2VudHJhdGlvbiBzdXIgbGEgU2FudFx1MDBlOSBNZW50YWxlKiogOiBcdTAwYzAgbGEgc3VpdGUgZGUgbGEgcGFuZFx1MDBlOW1pZSBkZSBDT1ZJRC0xOSwgbCdhY2NlbnQgYSBcdTAwZTl0XHUwMGU5IG1pcyBzdXIgbGUgYmllbi1cdTAwZWF0cmUgbWVudGFsIGRhbnMgbGVzIHByb2dyYW1tZXMgZGUgZml0bmVzcy4gTGVzIHJlc3NvdXJjZXMgYWJvcmRhbnQgbGEgc2FudFx1MDBlOSBtZW50YWxlIGV0IGxhIGdlc3Rpb24gZHUgc3RyZXNzIGRldmllbm5lbnQgZGVzIFx1MDBlOWxcdTAwZTltZW50cyBlc3NlbnRpZWxzIGRlcyBvZmZyZXMgZGUgZml0bmVzcy5cblxuQ2VzIGlkXHUwMGU5ZXMgcmVmbFx1MDBlOHRlbnQgdW4gY2hhbmdlbWVudCBkeW5hbWlxdWUgZGFucyBsZSBwYXlzYWdlIGR1IGZpdG5lc3MsIG1ldHRhbnQgbCdhY2NlbnQgc3VyIGwnaW50XHUwMGU5Z3JhdGlvbiBudW1cdTAwZTlyaXF1ZSwgbGEgcGVyc29ubmFsaXNhdGlvbiwgbGEgZHVyYWJpbGl0XHUwMGU5IGV0IGxhIHNlbnNpYmlsaXNhdGlvbiBcdTAwZTAgbGEgc2FudFx1MDBlOSBtZW50YWxlLiBFbnNlbWJsZSwgZWxsZXMgb3V2cmVudCBsYSB2b2llIFx1MDBlMCB1biBlbnZpcm9ubmVtZW50IGRlIGZpdG5lc3MgcGx1cyBpbmNsdXNpZiBldCBlZmZpY2FjZSBkJ2ljaSAyMDI1LiIsCiAgICAgICAgICAiZnJlbmNoIjogIiIKICAgICAgICB9LAogICAgICAgICJjcmVhdGVkIjogIjIwMjUwMjEzXzExMDgzNCIsCiAgICAgICAgImZpbGVuYW1lIjogImxpbmtlZGluX3Bvc3RfMjAyNTAyMTNfMTEwODM0Lm1kIiwKICAgICAgICAidG9waWMiOiAiVGVuZGFuY2VzIDIwMjUgRml0bmVzcyIKICAgICAgfSwKICAgICAgewogICAgICAgICJjb250ZW50IjogewogICAgICAgICAgImVuZ2xpc2giOiAiIyIsCiAgICAgICAgICAiZnJlbmNoIjogIlx1MDBjMCBsJ2FwcHJvY2hlIGRlIDIwMjUsIGwnaW5kdXN0cmllIGR1IGZpdG5lc3MgZXN0IHN1ciBsZSBwb2ludCBkZSBjb25uYVx1MDBlZXRyZSB1bmUgdHJhbnNmb3JtYXRpb24gc2lnbmlmaWNhdGl2ZSwgc3RpbXVsXHUwMGU5ZSBwYXIgbGVzIGF2YW5jXHUwMGU5ZXMgdGVjaG5vbG9naXF1ZXMgZXQgbCdcdTAwZTl2b2x1dGlvbiBkZXMgYXR0ZW50ZXMgZGVzIGNvbnNvbW1hdGV1cnMuIFZvaWNpIGxlcyB0ZW5kYW5jZXMgY2xcdTAwZTlzIHF1aSBmYVx1MDBlN29ubmVyb250IGxlIHBheXNhZ2UgZHUgZml0bmVzcyA6XG5cbjEuICoqRXhwYW5zaW9uIGR1IEZpdG5lc3MgTnVtXHUwMGU5cmlxdWUqKiAgXG5MZSBtYXJjaFx1MDBlOSBkdSBmaXRuZXNzIG51bVx1MDBlOXJpcXVlIGRldnJhaXQgZFx1MDBlOXBhc3NlciAzMCBtaWxsaWFyZHMgZGUgZG9sbGFycyBkJ2ljaSAyMDI1LCBhdmVjIHVuIHRhdXggZGUgY3JvaXNzYW5jZSBhbm51ZWwgY29tcG9zXHUwMGU5IChUQ0FDKSBkZSBwbHVzIGRlIDMwICUuIExhIHBhbmRcdTAwZTltaWUgYSBvdXZlcnQgbGEgdm9pZSBcdTAwZTAgZGVzIGNvdXJzIHZpcnR1ZWxzIGV0IGRlcyBhcHBsaWNhdGlvbnMgZGUgZml0bmVzcyBxdWkgb2ZmcmVudCB1bmUgY29tbW9kaXRcdTAwZTkgZXQgdW5lIGZsZXhpYmlsaXRcdTAwZTkgc2FucyBwclx1MDBlOWNcdTAwZTlkZW50LiBEZXMgZW50cmVwcmlzZXMgY29tbWUgUGVsb3RvbiBtXHUwMGU4bmVudCBsYSBjaGFyZ2UsIG1haXMgZGUgbm91dmVsbGVzIGlubm92YXRpb25zIFx1MDBlOW1lcmdlbnQgcmFwaWRlbWVudC5cblxuMi4gKipUZWNobm9sb2dpZSBQb3J0YWJsZSoqICBcbkxlIG1hcmNoXHUwMGU5IGRlcyB0ZWNobm9sb2dpZXMgZGUgZml0bmVzcyBwb3J0YWJsZXMgZGV2cmFpdCBhdHRlaW5kcmUgMTAwIG1pbGxpYXJkcyBkZSBkb2xsYXJzLiBEZSBwbHVzIGVuIHBsdXMgZGUgY29uc29tbWF0ZXVycyB1dGlsaXNlbnQgZGVzIHRyYWNrZXJzIGRlIGZpdG5lc3MgZXQgZGVzIG1vbnRyZXMgaW50ZWxsaWdlbnRlcyBwb3VyIHN1cnZlaWxsZXIgbGV1cnMgaW5kaWNhdGV1cnMgZGUgc2FudFx1MDBlOSwgbGV1ciBwZXJtZXR0YW50IGRlIHBlcnNvbm5hbGlzZXIgbGV1cnMgcGFyY291cnMgZGUgZml0bmVzcyBnclx1MDBlMmNlIFx1MDBlMCBkZXMgZG9ublx1MDBlOWVzIGVuIHRlbXBzIHJcdTAwZTllbC5cblxuMy4gKipQZXJzb25uYWxpc2F0aW9uIGV0IEludFx1MDBlOWdyYXRpb24gZGUgbCdJQSoqICBcbkQnaWNpIDIwMjUsIHBsdXMgZGUgNjAgJSBkZXMgcHJvZ3JhbW1lcyBkZSBmaXRuZXNzIHByb3Bvc2Vyb250IHByb2JhYmxlbWVudCBkZXMgcGxhbnMgZCdlbnRyYVx1MDBlZW5lbWVudCBwZXJzb25uYWxpc1x1MDBlOXMgYmFzXHUwMGU5cyBzdXIgbCdJQS4gQ2VzIGFwcHJvY2hlcyBhZGFwdFx1MDBlOWVzIHJlbmZvcmNlbnQgbCdlbmdhZ2VtZW50IGRlcyB1dGlsaXNhdGV1cnMgZXQgbGVzIGFpZGVudCBcdTAwZTAgYXR0ZWluZHJlIGxldXJzIG9iamVjdGlmcyBkZSBmaXRuZXNzIHBsdXMgZWZmaWNhY2VtZW50LlxuXG40LiAqKlNhbnRcdTAwZTkgZXQgQmllbi1cdTAwZWF0cmUgSG9saXN0aXF1ZSoqICBcbkF2ZWMgNzAgJSBkZXMgcGFzc2lvbm5cdTAwZTlzIGRlIGZpdG5lc3MgcHJpdmlsXHUwMGU5Z2lhbnQgZGVzIGFwcHJvY2hlcyBob2xpc3RpcXVlcywgbGVzIHByb2dyYW1tZXMgaW50XHUwMGU4Z3JlbnQgZGUgcGx1cyBlbiBwbHVzIGxhIHBsZWluZSBjb25zY2llbmNlLCBsZSB5b2dhIGV0IGxlIGNvYWNoaW5nIG51dHJpdGlvbm5lbC4gQ2UgY2hhbmdlbWVudCByZWZsXHUwMGU4dGUgdW5lIGNvbXByXHUwMGU5aGVuc2lvbiBnbG9iYWxlIGRlIGxhIHNhbnRcdTAwZTkgcXVpIHZhIGF1LWRlbFx1MDBlMCBkZSBsYSBzaW1wbGUgZm9ybWUgcGh5c2lxdWUuXG5cbjUuICoqRHVyYWJpbGl0XHUwMGU5IGRhbnMgbGUgRml0bmVzcyoqICBcbkF2ZWMgbGEgbW9udFx1MDBlOWUgZGUgbGEgY29uc2NpZW5jZSBcdTAwZTljb2xvZ2lxdWUsIDUwICUgZGVzIGNvbnNvbW1hdGV1cnMgdmFsb3Jpc2Vyb250IGxhIGR1cmFiaWxpdFx1MDBlOSBkYW5zIGxlIGZpdG5lc3MgZCdpY2kgMjAyNS4gTGVzIHNhbGxlcyBkZSBzcG9ydCBldCBsZXMgbWFycXVlcyBhZG9wdGVudCBkZXMgcHJhdGlxdWVzIGR1cmFibGVzLCBhbGxhbnQgZGUgbCdcdTAwZTluZXJnaWUgcmVub3V2ZWxhYmxlIFx1MDBlMCBsJ1x1MDBlOXF1aXBlbWVudCBcdTAwZTljb2xvZ2lxdWUsIGVuIGFkXHUwMGU5cXVhdGlvbiBhdmVjIGxhIGRlbWFuZGUgZGVzIGNvbnNvbW1hdGV1cnMgcG91ciBkZXMgcHJhdGlxdWVzIHJlc3BvbnNhYmxlcy5cblxuNi4gKipDb21tdW5hdXRcdTAwZTkgZXQgRW5nYWdlbWVudCBTb2NpYWwqKiAgXG5BdmVjIDY1ICUgZGVzIGNvbnNvbW1hdGV1cnMgcydlbmdhZ2VhbnQgZGFucyBkZXMgXHUwMGU5dlx1MDBlOW5lbWVudHMgZGUgZml0bmVzcyBlbiBncm91cGUgb3UgY29tbXVuYXV0YWlyZXMsIGxlcyBtXHUwMGU5ZGlhcyBzb2NpYXV4IG9udCBqb3VcdTAwZTkgdW4gclx1MDBmNGxlIGNydWNpYWwgZGFucyBsYSBjclx1MDBlOWF0aW9uIGRlIGNvbW11bmF1dFx1MDBlOXMgZGUgZml0bmVzcy4gQ2VzIHBsYXRlZm9ybWVzIHBlcm1ldHRlbnQgYXV4IHV0aWxpc2F0ZXVycyBkZSBwYXJ0YWdlciBsZXVycyBwYXJjb3VycywgY3JcdTAwZTlhbnQgbW90aXZhdGlvbiBldCBzZW50aW1lbnQgZCdhcHBhcnRlbmFuY2UuXG5cbkxlIHBheXNhZ2UgZHUgZml0bmVzcyBlbiAyMDI1IHByb21ldCBkJ1x1MDBlYXRyZSBpbm5vdmFudCwgaW5jbHVzaWYgZXQgcmVzcG9uc2FibGUuIFx1MDBjYXRlcy12b3VzIHByXHUwMGVhdCBcdTAwZTAgZW1icmFzc2VyIGNlcyB0ZW5kYW5jZXMgPyIKICAgICAgICB9LAogICAgICAgICJjcmVhdGVkIjogIjIwMjUwMjA5XzIwNTQwMSIsCiAgICAgICAgImZpbGVuYW1lIjogImxpbmtlZGluX3Bvc3RfMjAyNTAyMDlfMjA1NDAxLm1kIiwKICAgICAgICAidG9waWMiOiAiVGVuZGFuY2VzIDIwMjUgRml0bmVzcyIKICAgICAgfSwKICAgICAgewogICAgICAgICJjb250ZW50IjogewogICAgICAgICAgImVuZ2xpc2giOiAiXHVkODNkXHVkZTgwICoqRXhwbG9yaW5nIHRoZSBMYXRlc3QgRml0bmVzcyBUcmVuZHMgZm9yIDIwMjUqKiBcdWQ4M2RcdWRlODAgIFxuXG5BcyB3ZSBzdGVwIGludG8gMjAyNSwgdGhlIGZpdG5lc3MgaW5kdXN0cnkgaXMgdW5kZXJnb2luZyBhIHRyYW5zZm9ybWF0aXZlIGV2b2x1dGlvbiwgZHJpdmVuIGJ5IGN1dHRpbmctZWRnZSB0ZWNobm9sb2d5LCBhbiBpbmNyZWFzZWQgZW1waGFzaXMgb24gbWVudGFsIGhlYWx0aCwgYW5kIHRoZSByaXNlIG9mIHBlcnNvbmFsaXplZCBmaXRuZXNzIHNvbHV0aW9ucy4gSGVyZSBhcmUgdGhlIGtleSB0cmVuZHMgc2hhcGluZyB0aGUgZnV0dXJlIG9mIGZpdG5lc3M6ICBcblxuMS4gKipXZWFyYWJsZSBUZWNobm9sb2d5Kio6IFRoZSBnbG9iYWwgd2VhcmFibGUgZml0bmVzcyB0ZWNobm9sb2d5IG1hcmtldCBpcyBwcm9qZWN0ZWQgdG8gaGl0ICoqJDYyIGJpbGxpb24qKiwgd2l0aCBkZXZpY2VzIHRoYXQgdHJhY2sgbm90IGp1c3QgcGh5c2ljYWwgYWN0aXZpdHksIGJ1dCBhbHNvIGhlYXJ0IHJhdGVzLCBzbGVlcCBwYXR0ZXJucywgYW5kIHN0cmVzcyBsZXZlbHMuICBcblxuMi4gKipWaXJ0dWFsIGFuZCBBdWdtZW50ZWQgUmVhbGl0eSBXb3Jrb3V0cyoqOiBDb21wYW5pZXMgbGlrZSAqKlBlbG90b24qKiBhbmQgKipNaXJyb3IqKiBhcmUgcmV2b2x1dGlvbml6aW5nIHdvcmtvdXRzIHdpdGggaW1tZXJzaXZlIGV4cGVyaWVuY2VzLiBUaGUgVlIgZml0bmVzcyBtYXJrZXQgaXMgZXhwZWN0ZWQgdG8gZ3JvdyBhdCBhIHN0YWdnZXJpbmcgKiozMCUgQ0FHUioqLiAgXG5cbjMuICoqUGVyc29uYWxpemF0aW9uIGFuZCBBSSoqOiBBSS1kcml2ZW4gYXBwbGljYXRpb25zIGFyZSBjcmVhdGluZyB0YWlsb3JlZCB3b3Jrb3V0IGFuZCBudXRyaXRpb24gcGxhbnMsIHdpdGggKio0MCUqKiBvZiB1c2VycyBwcmVmZXJyaW5nIHBlcnNvbmFsaXplZCBleHBlcmllbmNlcy4gIFxuXG40LiAqKk1lbnRhbCBIZWFsdGggSW50ZWdyYXRpb24qKjogRml0bmVzcyBwcm9ncmFtcyBhcmUgaW5jcmVhc2luZ2x5IGluY29ycG9yYXRpbmcgbWluZGZ1bG5lc3MgcHJhY3RpY2VzLCByZWNvZ25pemluZyB0aGUgdml0YWwgbGluayBiZXR3ZWVuIHBoeXNpY2FsIGZpdG5lc3MgYW5kIG1lbnRhbCB3ZWxsLWJlaW5nLiAgXG5cbjUuICoqU3VzdGFpbmFibGUgRml0bmVzcyBQcmFjdGljZXMqKjogV2l0aCAqKjc4JSoqIG9mIGNvbnN1bWVycyB3aWxsaW5nIHRvIHBheSBtb3JlIGZvciBzdXN0YWluYWJsZSBwcm9kdWN0cywgZWNvLWZyaWVuZGx5IHByYWN0aWNlcyBhcmUgYmVjb21pbmcgc3RhbmRhcmQgaW4gZ3ltcyBhbmQgZml0bmVzcyBicmFuZHMuICBcblxuNi4gKipDb21tdW5pdHktRHJpdmVuIFdvcmtvdXRzKio6IEdyb3VwIGNsYXNzZXMgYW5kIHNvY2lhbCBwbGF0Zm9ybXMgYXJlIHRocml2aW5nLCB3aXRoICoqNjAlKiogb2YgZml0bmVzcyBlbnRodXNpYXN0cyBwcmVmZXJyaW5nIHRoZSBjYW1hcmFkZXJpZSBvZiB3b3JraW5nIG91dCBpbiBncm91cHMuICBcblxuNy4gKipIeWJyaWQgRml0bmVzcyBNb2RlbHMqKjogVGhlIHBhbmRlbWljIGhhcyBhY2NlbGVyYXRlZCB0aGUgaHlicmlkIG1vZGVsIG9mIGNvbWJpbmluZyBpbi1wZXJzb24gYW5kIG9ubGluZSBjbGFzc2VzLCB3aXRoIHRoZSBvbmxpbmUgZml0bmVzcyBtYXJrZXQgZXhwZWN0ZWQgdG8gZ3JvdyBieSAqKjMzJSoqLiAgXG5cbjguICoqRnVuY3Rpb25hbCBGaXRuZXNzIFRyYWluaW5nKio6IEZvY3VzZWQgb24gZXhlcmNpc2VzIHRoYXQgbWlycm9yIGV2ZXJ5ZGF5IGFjdGl2aXRpZXMsIGZ1bmN0aW9uYWwgdHJhaW5pbmcgd2lsbCBjb250aW51ZSB0byBnYWluIHBvcHVsYXJpdHkgYWNyb3NzIGRlbW9ncmFwaGljcy4gIFxuXG5JbiBzdW1tYXJ5LCB0aGUgZml0bmVzcyB0cmVuZHMgb2YgMjAyNSBzaG93Y2FzZSBhIGR5bmFtaWMgc2hpZnQgdG93YXJkcyB0ZWNobm9sb2d5LCBwZXJzb25hbGl6YXRpb24sIG1lbnRhbCBoZWFsdGgsIHN1c3RhaW5hYmlsaXR5LCBjb21tdW5pdHkgZW5nYWdlbWVudCwgYW5kIGh5YnJpZCB0cmFpbmluZyBtZXRob2RzLiBJdCdzIGNydWNpYWwgZm9yIGluZHVzdHJ5IHN0YWtlaG9sZGVycyB0byBhZGFwdCB0byB0aGVzZSB0cmVuZHMgdG8gcmVtYWluIGNvbXBldGl0aXZlIGFuZCBtZWV0IHRoZSBldm9sdmluZyBuZWVkcyBvZiBjb25zdW1lcnMuICBcblxuLS0tXG5cbiMiLAogICAgICAgICAgImZyZW5jaCI6ICJcdWQ4M2RcdWRlODAgKipFeHBsb3JlciBsZXMgRGVybmlcdTAwZThyZXMgVGVuZGFuY2VzIGR1IEZpdG5lc3MgcG91ciAyMDI1KiogXHVkODNkXHVkZTgwICBcblxuQWxvcnMgcXVlIG5vdXMgZW50cm9ucyBlbiAyMDI1LCBsJ2luZHVzdHJpZSBkdSBmaXRuZXNzIHN1Yml0IHVuZSBcdTAwZTl2b2x1dGlvbiB0cmFuc2Zvcm1hdGl2ZSwgcHJvcHVsc1x1MDBlOWUgcGFyIGRlcyB0ZWNobm9sb2dpZXMgZGUgcG9pbnRlLCB1bmUgYXR0ZW50aW9uIGFjY3J1ZSBwb3J0XHUwMGU5ZSBcdTAwZTAgbGEgc2FudFx1MDBlOSBtZW50YWxlIGV0IGwnZXNzb3IgZGVzIHNvbHV0aW9ucyBkZSBmaXRuZXNzIHBlcnNvbm5hbGlzXHUwMGU5ZXMuIFZvaWNpIGxlcyB0ZW5kYW5jZXMgY2xcdTAwZTlzIHF1aSBmYVx1MDBlN29ubmVudCBsJ2F2ZW5pciBkdSBmaXRuZXNzIDogIFxuXG4xLiAqKlRlY2hub2xvZ2llIFBvcnRhYmxlKiogOiBMZSBtYXJjaFx1MDBlOSBtb25kaWFsIGRlIGxhIHRlY2hub2xvZ2llIHBvcnRhYmxlIHBvdXIgbGUgZml0bmVzcyBkZXZyYWl0IGF0dGVpbmRyZSAqKjYyIG1pbGxpYXJkcyBkZSBkb2xsYXJzKiosIGF2ZWMgZGVzIGRpc3Bvc2l0aWZzIHF1aSBzdWl2ZW50IG5vbiBzZXVsZW1lbnQgbCdhY3Rpdml0XHUwMGU5IHBoeXNpcXVlLCBtYWlzIGF1c3NpIGxlcyBmclx1MDBlOXF1ZW5jZXMgY2FyZGlhcXVlcywgbGVzIGN5Y2xlcyBkZSBzb21tZWlsIGV0IGxlcyBuaXZlYXV4IGRlIHN0cmVzcy4gIFxuXG4yLiAqKkVudHJhXHUwMGVlbmVtZW50cyBlbiBSXHUwMGU5YWxpdFx1MDBlOSBWaXJ0dWVsbGUgZXQgQXVnbWVudFx1MDBlOWUqKiA6IERlcyBlbnRyZXByaXNlcyBjb21tZSAqKlBlbG90b24qKiBldCAqKk1pcnJvcioqIHJcdTAwZTl2b2x1dGlvbm5lbnQgbGVzIHNcdTAwZTlhbmNlcyBkJ2VudHJhXHUwMGVlbmVtZW50IGF2ZWMgZGVzIGV4cFx1MDBlOXJpZW5jZXMgaW1tZXJzaXZlcy4gTGUgbWFyY2hcdTAwZTkgZHUgZml0bmVzcyBWUiBkZXZyYWl0IGNyb1x1MDBlZXRyZSBcdTAwZTAgdW4gaW1wcmVzc2lvbm5hbnQgdGF1eCBkZSAqKjMwICUgQ0FHUioqLiAgXG5cbjMuICoqUGVyc29ubmFsaXNhdGlvbiBldCBJQSoqIDogTGVzIGFwcGxpY2F0aW9ucyBhbGltZW50XHUwMGU5ZXMgcGFyIGwnSUEgY3JcdTAwZTllbnQgZGVzIHBsYW5zIGQnZW50cmFcdTAwZWVuZW1lbnQgZXQgZGUgbnV0cml0aW9uIHN1ciBtZXN1cmUsIGF2ZWMgKio0MCAlKiogZGVzIHV0aWxpc2F0ZXVycyBwclx1MDBlOWZcdTAwZTlyYW50IGRlcyBleHBcdTAwZTlyaWVuY2VzIHBlcnNvbm5hbGlzXHUwMGU5ZXMuICBcblxuNC4gKipJbnRcdTAwZTlncmF0aW9uIGRlIGxhIFNhbnRcdTAwZTkgTWVudGFsZSoqIDogTGVzIHByb2dyYW1tZXMgZGUgZml0bmVzcyBpbnRcdTAwZThncmVudCBkZSBwbHVzIGVuIHBsdXMgZGVzIHByYXRpcXVlcyBkZSBwbGVpbmUgY29uc2NpZW5jZSwgcmVjb25uYWlzc2FudCBsZSBsaWVuIHZpdGFsIGVudHJlIGxhIGZvcm1lIHBoeXNpcXVlIGV0IGxlIGJpZW4tXHUwMGVhdHJlIG1lbnRhbC4gIFxuXG41LiAqKlByYXRpcXVlcyBkZSBGaXRuZXNzIER1cmFibGVzKiogOiBBdmVjICoqNzggJSoqIGRlcyBjb25zb21tYXRldXJzIHByXHUwMGVhdHMgXHUwMGUwIHBheWVyIHBsdXMgcG91ciBkZXMgcHJvZHVpdHMgZHVyYWJsZXMsIGxlcyBwcmF0aXF1ZXMgcmVzcGVjdHVldXNlcyBkZSBsJ2Vudmlyb25uZW1lbnQgZGV2aWVubmVudCBsYSBub3JtZSBkYW5zIGxlcyBzYWxsZXMgZGUgc3BvcnQgZXQgbGVzIG1hcnF1ZXMgZGUgZml0bmVzcy4gIFxuXG42LiAqKkVudHJhXHUwMGVlbmVtZW50cyBBeFx1MDBlOXMgc3VyIGxhIENvbW11bmF1dFx1MDBlOSoqIDogTGVzIGNvdXJzIGRlIGdyb3VwZSBldCBsZXMgcGxhdGVmb3JtZXMgc29jaWFsZXMgcHJvc3BcdTAwZThyZW50LCAqKjYwICUqKiBkZXMgcGFzc2lvbm5cdTAwZTlzIGRlIGZpdG5lc3MgcHJcdTAwZTlmXHUwMGU5cmFudCBsYSBjYW1hcmFkZXJpZSBkZSBzJ2VudHJhXHUwMGVlbmVyIGVuIGdyb3VwZS4gIFxuXG43LiAqKk1vZFx1MDBlOGxlcyBkZSBGaXRuZXNzIEh5YnJpZGVzKiogOiBMYSBwYW5kXHUwMGU5bWllIGEgYWNjXHUwMGU5bFx1MDBlOXJcdTAwZTkgbGUgbW9kXHUwMGU4bGUgaHlicmlkZSBxdWkgY29tYmluZSBkZXMgY291cnMgZW4gcGVyc29ubmUgZXQgZW4gbGlnbmUsIGxlIG1hcmNoXHUwMGU5IGR1IGZpdG5lc3MgZW4gbGlnbmUgZGV2YW50IGNyb1x1MDBlZXRyZSBkZSAqKjMzICUqKi4gIFxuXG44LiAqKkVudHJhXHUwMGVlbmVtZW50IEZvbmN0aW9ubmVsKiogOiBBeFx1MDBlOSBzdXIgZGVzIGV4ZXJjaWNlcyBxdWkgaW1pdGVudCBsZXMgYWN0aXZpdFx1MDBlOXMgcXVvdGlkaWVubmVzLCBsJ2VudHJhXHUwMGVlbmVtZW50IGZvbmN0aW9ubmVsIGNvbnRpbnVlcmEgZGUgZ2FnbmVyIGVuIHBvcHVsYXJpdFx1MDBlOSBhdXByXHUwMGU4cyBkZSBkaXZlcnMgcHVibGljcy4gIFxuXG5FbiByXHUwMGU5c3VtXHUwMGU5LCBsZXMgdGVuZGFuY2VzIGR1IGZpdG5lc3MgZW4gMjAyNSByXHUwMGU5dlx1MDBlOGxlbnQgdW4gY2hhbmdlbWVudCBkeW5hbWlxdWUgdmVycyBsYSB0ZWNobm9sb2dpZSwgbGEgcGVyc29ubmFsaXNhdGlvbiwgbGEgc2FudFx1MDBlOSBtZW50YWxlLCBsYSBkdXJhYmlsaXRcdTAwZTksIGwnZW5nYWdlbWVudCBjb21tdW5hdXRhaXJlIGV0IGxlcyBtXHUwMGU5dGhvZGVzIGQnZW50cmFcdTAwZWVuZW1lbnQgaHlicmlkZXMuIElsIGVzdCBlc3NlbnRpZWwgcXVlIGxlcyBhY3RldXJzIGRlIGwnaW5kdXN0cmllIHMnYWRhcHRlbnQgXHUwMGUwIGNlcyB0ZW5kYW5jZXMgcG91ciByZXN0ZXIgY29tcFx1MDBlOXRpdGlmcyBldCByXHUwMGU5cG9uZHJlIGF1eCBiZXNvaW5zIFx1MDBlOXZvbHV0aWZzIGRlcyBjb25zb21tYXRldXJzLiIKICAgICAgICB9LAogICAgICAgICJjcmVhdGVkIjogIjIwMjUwMjA5XzIwNDE1NyIsCiAgICAgICAgImZpbGVuYW1lIjogImxpbmtlZGluX3Bvc3RfMjAyNTAyMDlfMjA0MTU3Lm1kIiwKICAgICAgICAidG9waWMiOiAiTGVzIGRlcm5pXHUwMGU4cmUgdGVuZGFuY2VzIGR1IEZpdG5lc3MgZW4gMjAyNSIKICAgICAgfSwKICAgICAgewogICAgICAgICJjb250ZW50IjogewogICAgICAgICAgImVuZ2xpc2giOiAiIyBFbmdsaXNoIFZlcnNpb24gIFxuKipFeHBsb3JpbmcgdGhlIExhdGVzdCBGaXRuZXNzIFRyZW5kcyBvZiAyMDI1KiogIFxuXG5BcyB3ZSBzdGVwIGludG8gMjAyNSwgdGhlIGZpdG5lc3MgaW5kdXN0cnkgaXMgcG9pc2VkIGZvciByZW1hcmthYmxlIHRyYW5zZm9ybWF0aW9uLCBmdWVsZWQgYnkgdGVjaG5vbG9naWNhbCBhZHZhbmNlbWVudHMgYW5kIHNoaWZ0aW5nIGNvbnN1bWVyIHByZWZlcmVuY2VzLiBIZXJlIGFyZSB0aGUga2V5IHRyZW5kcyB0byB3YXRjaDpcblxuMS4gKipJbnRlZ3JhdGlvbiBvZiBUZWNobm9sb2d5Kio6IFRoZSByaXNlIG9mIHdlYXJhYmxlIHRlY2ggYW5kIGZpdG5lc3MgYXBwcyBpcyB1bnN0b3BwYWJsZS4gQnkgMjAyNiwgdGhlIGZpdG5lc3MgYXBwIG1hcmtldCBpcyBwcm9qZWN0ZWQgdG8gaGl0ICQxNCBiaWxsaW9uLCBlbmhhbmNpbmcgcGVyc29uYWxpemVkIGZpdG5lc3MgZXhwZXJpZW5jZXMgdGhyb3VnaCByZWFsLXRpbWUgaGVhbHRoIGRhdGEuIFxuXG4yLiAqKlZpcnR1YWwgYW5kIEh5YnJpZCBXb3Jrb3V0cyoqOiBUaGUgcGFuZGVtaWMgaGFzIG1hZGUgdmlydHVhbCBmaXRuZXNzIGNsYXNzZXMgYSBzdGFwbGUuIEEgc3RhZ2dlcmluZyA3MCUgb2YgY29uc3VtZXJzIHdhbnQgdG8gY29udGludWUgdGhlc2UgY2xhc3NlcyBwb3N0LXBhbmRlbWljLCBsZWFkaW5nIHRvIHRoZSBkb21pbmFuY2Ugb2YgaHlicmlkIG1vZGVscyB0aGF0IGJsZW5kIGluLXBlcnNvbiBhbmQgb25saW5lIHdvcmtvdXRzLlxuXG4zLiAqKkZvY3VzIG9uIE1lbnRhbCBIZWFsdGgqKjogVGhlIGNvbm5lY3Rpb24gYmV0d2VlbiBtZW50YWwgYW5kIHBoeXNpY2FsIHdlbGwtYmVpbmcgaXMgbW9yZSByZWNvZ25pemVkIHRoYW4gZXZlci4gRXhwZWN0IGZpdG5lc3MgcHJvZ3JhbXMgZmVhdHVyaW5nIG1pbmRmdWxuZXNzIHByYWN0aWNlcyB0byByaXNlLCBhbGlnbmluZyB3aXRoIHRoZSBzb2NpZXRhbCBzaGlmdCB0b3dhcmRzIGhvbGlzdGljIGhlYWx0aC5cblxuNC4gKipTdXN0YWluYWJsZSBGaXRuZXNzKio6IEFzIGVudmlyb25tZW50YWwgYXdhcmVuZXNzIGdyb3dzLCBzbyBkb2VzIHRoZSBkZW1hbmQgZm9yIHN1c3RhaW5hYmxlIGZpdG5lc3Mgb3B0aW9ucy4gQSBzaWduaWZpY2FudCA3MyUgb2YgbWlsbGVubmlhbHMgYXJlIHdpbGxpbmcgdG8gcGF5IG1vcmUgZm9yIGVjby1mcmllbmRseSBwcm9kdWN0cywgcHJvbXB0aW5nIGJyYW5kcyB0byBhZG9wdCBncmVlbmVyIHByYWN0aWNlcy5cblxuNS4gKipQZXJzb25hbGl6ZWQgTnV0cml0aW9uKio6IFRhaWxvcmVkIGRpZXRhcnkgcGxhbnMgYXJlIG9uIHRoZSByaXNlLCB3aXRoIHRoZSBwZXJzb25hbGl6ZWQgbnV0cml0aW9uIG1hcmtldCBleHBlY3RlZCB0byByZWFjaCAkMjEgYmlsbGlvbiBieSAyMDI1LCB0aGFua3MgdG8gQUkgYW5kIGdlbmV0aWMgYWR2YW5jZW1lbnRzLlxuXG42LiAqKkNvbW11bml0eSBhbmQgU29jaWFsIEVuZ2FnZW1lbnQqKjogQnVpbGRpbmcgZml0bmVzcyBjb21tdW5pdGllcyB3aWxsIHJlbWFpbiBlc3NlbnRpYWwuIFBsYXRmb3JtcyBwcm9tb3Rpbmcgc29jaWFsIGNvbm5lY3Rpb25zIGFtb25nIHVzZXJzIGFyZSB0aHJpdmluZywgYXMgc29jaWFsIG1vdGl2YXRpb24gaXMgY3J1Y2lhbCBmb3Igc3VzdGFpbmVkIHdvcmtvdXQgaGFiaXRzLlxuXG43LiAqKlJlY292ZXJ5IGFuZCBSZWdlbmVyYXRpb24qKjogSW5jcmVhc2VkIGZvY3VzIG9uIHJlY292ZXJ5IG1lYW5zIGEgc3VyZ2UgaW4gcmVjb3ZlcnkgcHJvZHVjdHMuIFRoZSByZWNvdmVyeSBlcXVpcG1lbnQgbWFya2V0IGlzIHNldCBmb3IgZ3Jvd3RoLCBoaWdobGlnaHRpbmcgYSBiYWxhbmNlZCBhcHByb2FjaCB0byBmaXRuZXNzLlxuXG44LiAqKkRpdmVyc2l0eSBhbmQgSW5jbHVzaXZpdHkqKjogVGhlIGZpdG5lc3Mgd29ybGQgaXMgZW1icmFjaW5nIGRpdmVyc2l0eSwgd2l0aCBicmFuZHMgZm9jdXNpbmcgb24gcmVwcmVzZW50aW5nIHZhcmlvdXMgYm9keSB0eXBlcyBhbmQgYWJpbGl0aWVzLCBwcm9tb3RpbmcgYWNjZXNzaWJsZSBmaXRuZXNzIGZvciBhbGwuXG5cbkluIHN1bW1hcnksIHRoZSBmaXRuZXNzIHRyZW5kcyBvZiAyMDI1IGlsbHVzdHJhdGUgYSBzaGlmdCB0b3dhcmRzIHRlY2hub2xvZ3kgaW50ZWdyYXRpb24sIGhvbGlzdGljIGhlYWx0aCwgc3VzdGFpbmFiaWxpdHksIHBlcnNvbmFsaXphdGlvbiwgYW5kIGNvbW11bml0eSBlbmdhZ2VtZW50LiBUaGVzZSBjaGFuZ2VzIGFyZSByZWRlZmluaW5nIGZpdG5lc3MsIGVtcGhhc2l6aW5nIG92ZXJhbGwgd2VsbC1iZWluZyByYXRoZXIgdGhhbiBqdXN0IHBoeXNpY2FsIGhlYWx0aC5cblxuLS0tXG5cbiMgRnJlbmNoIFZlcnNpb24gIFxuKipcdTAwYzAgbGEgZFx1MDBlOWNvdXZlcnRlIGRlcyBkZXJuaVx1MDBlOHJlcyB0ZW5kYW5jZXMgZHUgZml0bmVzcyBlbiAyMDI1KiogIFxuXG5BbG9ycyBxdWUgbm91cyBlbnRyb25zIGVuIDIwMjUsIGwnaW5kdXN0cmllIGR1IGZpdG5lc3MgZXN0IHByXHUwMGVhdGUgXHUwMGUwIGNvbm5hXHUwMGVldHJlIHVuZSB0cmFuc2Zvcm1hdGlvbiByZW1hcnF1YWJsZSwgYWxpbWVudFx1MDBlOWUgcGFyIGxlcyBhdmFuY1x1MDBlOWVzIHRlY2hub2xvZ2lxdWVzIGV0IGwnXHUwMGU5dm9sdXRpb24gZGVzIHByXHUwMGU5Zlx1MDBlOXJlbmNlcyBkZXMgY29uc29tbWF0ZXVycy4gVm9pY2kgbGVzIHByaW5jaXBhbGVzIHRlbmRhbmNlcyBcdTAwZTAgc3VydmVpbGxlciA6XG5cbjEuICoqSW50XHUwMGU5Z3JhdGlvbiBkZSBsYSB0ZWNobm9sb2dpZSoqIDogTCdlc3NvciBkZXMgdGVjaG5vbG9naWVzIHBvcnRhYmxlcyBldCBkZXMgYXBwbGljYXRpb25zIGRlIGZpdG5lc3MgZXN0IGltcGFyYWJsZS4gRCdpY2kgMjAyNiwgbGUgbWFyY2hcdTAwZTkgZGVzIGFwcGxpY2F0aW9ucyBkZSBmaXRuZXNzIGRldnJhaXQgYXR0ZWluZHJlIDE0IG1pbGxpYXJkcyBkZSBkb2xsYXJzLCBhbVx1MDBlOWxpb3JhbnQgbGVzIGV4cFx1MDBlOXJpZW5jZXMgZGUgZml0bmVzcyBwZXJzb25uYWxpc1x1MDBlOWVzIGdyXHUwMGUyY2UgXHUwMGUwIGRlcyBkb25uXHUwMGU5ZXMgZGUgc2FudFx1MDBlOSBlbiB0ZW1wcyByXHUwMGU5ZWwuIFxuXG4yLiAqKkNvdXJzIHZpcnR1ZWxzIGV0IGh5YnJpZGVzKiogOiBMYSBwYW5kXHUwMGU5bWllIGEgZmFpdCBkZXMgY291cnMgZGUgZml0bmVzcyB2aXJ0dWVscyB1biBcdTAwZTlsXHUwMGU5bWVudCBpbmNvbnRvdXJuYWJsZS4gVW4gaW1wcmVzc2lvbm5hbnQgNzAgJSBkZXMgY29uc29tbWF0ZXVycyBzb3VoYWl0ZW50IGNvbnRpbnVlciBjZXMgY291cnMgYXByXHUwMGU4cyBsYSBwYW5kXHUwMGU5bWllLCBjZSBxdWkgY29uZHVpdCBcdTAwZTAgbGEgZG9taW5hdGlvbiBkZXMgbW9kXHUwMGU4bGVzIGh5YnJpZGVzIGFsbGlhbnQgZW50cmFcdTAwZWVuZW1lbnRzIGVuIHByXHUwMGU5c2VudGllbCBldCBlbiBsaWduZS5cblxuMy4gKipDb25jZW50cmF0aW9uIHN1ciBsYSBzYW50XHUwMGU5IG1lbnRhbGUqKiA6IExhIGNvbm5leGlvbiBlbnRyZSBsZSBiaWVuLVx1MDBlYXRyZSBtZW50YWwgZXQgcGh5c2lxdWUgZXN0IHBsdXMgcmVjb25udWUgcXVlIGphbWFpcy4gQXR0ZW5kZXotdm91cyBcdTAwZTAgY2UgcXVlIGxlcyBwcm9ncmFtbWVzIGRlIGZpdG5lc3MgaW50XHUwMGU5Z3JhbnQgZGVzIHByYXRpcXVlcyBkZSBwbGVpbmUgY29uc2NpZW5jZSBzZSBkXHUwMGU5dmVsb3BwZW50LCBzJ2FsaWduYW50IHN1ciBsZSBtb3V2ZW1lbnQgc29jaVx1MDBlOXRhbCB2ZXJzIGxhIHNhbnRcdTAwZTkgaG9saXN0aXF1ZS5cblxuNC4gKipGaXRuZXNzIGR1cmFibGUqKiA6IFx1MDBjMCBtZXN1cmUgcXVlIGxhIHNlbnNpYmlsaXNhdGlvbiBlbnZpcm9ubmVtZW50YWxlIGF1Z21lbnRlLCBsYSBkZW1hbmRlIHBvdXIgZGVzIG9wdGlvbnMgZGUgZml0bmVzcyBkdXJhYmxlcyBjcm9cdTAwZWV0IFx1MDBlOWdhbGVtZW50LiBVbiBwb3VyY2VudGFnZSBzaWduaWZpY2F0aWYgZGUgNzMgJSBkZXMgbWlsbGVubmlhbHMgZXN0IHByXHUwMGVhdCBcdTAwZTAgcGF5ZXIgcGx1cyBwb3VyIGRlcyBwcm9kdWl0cyBcdTAwZTljb2xvZ2lxdWVzLCBpbmNpdGFudCBsZXMgbWFycXVlcyBcdTAwZTAgYWRvcHRlciBkZXMgcHJhdGlxdWVzIHBsdXMgdmVydGVzLlxuXG41LiAqKk51dHJpdGlvbiBwZXJzb25uYWxpc1x1MDBlOWUqKiA6IExlcyBwbGFucyBhbGltZW50YWlyZXMgc3VyIG1lc3VyZSBzb250IGVuIGhhdXNzZSwgbGUgbWFyY2hcdTAwZTkgZGUgbGEgbnV0cml0aW9uIHBlcnNvbm5hbGlzXHUwMGU5ZSBkZXZhbnQgYXR0ZWluZHJlIDIxIG1pbGxpYXJkcyBkZSBkb2xsYXJzIGQnaWNpIDIwMjUsIGdyXHUwMGUyY2UgYXV4IGF2YW5jXHUwMGU5ZXMgZW4gSUEgZXQgZW4gZ1x1MDBlOW5cdTAwZTl0aXF1ZS5cblxuNi4gKipDb21tdW5hdXRcdTAwZTkgZXQgZW5nYWdlbWVudCBzb2NpYWwqKiA6IENvbnN0cnVpcmUgZGVzIGNvbW11bmF1dFx1MDBlOXMgZGUgZml0bmVzcyByZXN0ZXJhIGVzc2VudGllbC4gTGVzIHBsYXRlZm9ybWVzIGZhdm9yaXNhbnQgbGVzIGNvbm5leGlvbnMgc29jaWFsZXMgZW50cmUgdXRpbGlzYXRldXJzIHByb3NwXHUwMGU4cmVudCwgY2FyIGxhIG1vdGl2YXRpb24gc29jaWFsZSBlc3QgY3J1Y2lhbGUgcG91ciBtYWludGVuaXIgZGVzIGhhYml0dWRlcyBkJ2VudHJhXHUwMGVlbmVtZW50LlxuXG43LiAqKlJcdTAwZTljdXBcdTAwZTlyYXRpb24gZXQgclx1MDBlOWdcdTAwZTluXHUwMGU5cmF0aW9uKiogOiBMJ2FjY2VudCBhY2NydSBzdXIgbGEgclx1MDBlOWN1cFx1MDBlOXJhdGlvbiBzaWduaWZpZSB1bmUgYXVnbWVudGF0aW9uIGRlcyBwcm9kdWl0cyBkZSByXHUwMGU5Y3VwXHUwMGU5cmF0aW9uLiBMZSBtYXJjaFx1MDBlOSBkZXMgXHUwMGU5cXVpcGVtZW50cyBkZSByXHUwMGU5Y3VwXHUwMGU5cmF0aW9uIGVzdCBlbiBwbGVpbmUgY3JvaXNzYW5jZSwgc291bGlnbmFudCB1bmUgYXBwcm9jaGUgXHUwMGU5cXVpbGliclx1MDBlOWUgZHUgZml0bmVzcy5cblxuOC4gKipEaXZlcnNpdFx1MDBlOSBldCBpbmNsdXNpdml0XHUwMGU5KiogOiBMZSBtb25kZSBkdSBmaXRuZXNzIGVtYnJhc3NlIGxhIGRpdmVyc2l0XHUwMGU5LCBsZXMgbWFycXVlcyBzZSBjb25jZW50cmFudCBzdXIgbGEgcmVwclx1MDBlOXNlbnRhdGlvbiBkZSBkaXZlcnMgdHlwZXMgZGUgY29ycHMgZXQgY2FwYWNpdFx1MDBlOXMsIHByb21vdXZhbnQgdW4gZml0bmVzcyBhY2Nlc3NpYmxlIFx1MDBlMCB0b3VzLlxuXG5FbiByXHUwMGU5c3VtXHUwMGU5LCBsZXMgdGVuZGFuY2VzIGR1IGZpdG5lc3MgZW4gMjAyNSBpbGx1c3RyZW50IHVuIGdsaXNzZW1lbnQgdmVycyBsJ2ludFx1MDBlOWdyYXRpb24gdGVjaG5vbG9naXF1ZSwgbGEgc2FudFx1MDBlOSBob2xpc3RpcXVlLCBsYSBkdXJhYmlsaXRcdTAwZTksIGxhIHBlcnNvbm5hbGlzYXRpb24gZXQgbCdlbmdhZ2VtZW50IGNvbW11bmF1dGFpcmUuIENlcyBjaGFuZ2VtZW50cyByZWRcdTAwZTlmaW5pc3NlbnQgbGUgZml0bmVzcywgbWV0dGFudCBsJ2FjY2VudCBzdXIgbGUgYmllbi1cdTAwZWF0cmUgZ2xvYmFsIHBsdXRcdTAwZjR0IHF1ZSBzdXIgbGEgc2V1bGUgc2FudFx1MDBlOSBwaHlzaXF1ZS4iLAogICAgICAgICAgImZyZW5jaCI6ICIiCiAgICAgICAgfSwKICAgICAgICAiY3JlYXRlZCI6ICIyMDI1MDIwOV8yMDQwMDYiLAogICAgICAgICJmaWxlbmFtZSI6ICJsaW5rZWRpbl9wb3N0XzIwMjUwMjA5XzIwNDAwNi5tZCIsCiAgICAgICAgInRvcGljIjogIkxlcyBkZXJuaVx1MDBlOHJlIHRlbmRhbmNlcyBkdSBGaXRuZXNzIGVuIDIwMjUiCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiY29udGVudCI6IHsKICAgICAgICAgICJlbmdsaXNoIjogIiMgVGhlIExhdGVzdCBGaXRuZXNzIFRyZW5kcyBvZiAyMDI0ICBcblxuQXMgd2Ugc3RlcCBpbnRvIDIwMjQsIHRoZSBmaXRuZXNzIGxhbmRzY2FwZSBpcyBldm9sdmluZyBhdCBhbiB1bnByZWNlZGVudGVkIHBhY2UuIEhlcmUgYXJlIHRoZSBrZXkgdHJlbmRzIHRvIHdhdGNoOiAgXG5cbjEuICoqSW50ZWdyYXRpb24gb2YgVGVjaG5vbG9neSBhbmQgV2VhcmFibGUgRGV2aWNlcyoqICBcbiAgIFRlY2hub2xvZ3kgcmVtYWlucyBjZW50cmFsIHRvIGZpdG5lc3MuIFNtYXJ0d2F0Y2hlcyBhbmQgYWN0aXZpdHkgdHJhY2tlcnMgYXJlIGJlY29taW5nIGluY3JlYXNpbmdseSBzb3BoaXN0aWNhdGVkLiBBY2NvcmRpbmcgdG8gYSByZXBvcnQgYnkgR3JhbmQgVmlldyBSZXNlYXJjaCwgdGhlIHdlYXJhYmxlIG1hcmtldCBpcyBleHBlY3RlZCB0byByZWFjaCAkMTAwIGJpbGxpb24gYnkgMjAyNCwgd2l0aCBzaWduaWZpY2FudCBncm93dGggaW4gZml0bmVzcyBhcHBzIGFuZCBvbmxpbmUgY29hY2hpbmcgcGxhdGZvcm1zLiAgXG5cbjIuICoqUGVyc29uYWxpemVkIFRyYWluaW5nIGFuZCBBSSBQcm9ncmFtcyoqICBcbiAgIEFydGlmaWNpYWwgaW50ZWxsaWdlbmNlIGlzIGJlaW5nIGhhcm5lc3NlZCB0byBjcmVhdGUgcGVyc29uYWxpemVkIHdvcmtvdXQgcHJvZ3JhbXMgdGFpbG9yZWQgdG8gaW5kaXZpZHVhbCBuZWVkcy4gUGxhdGZvcm1zIGxpa2UgRnJlZWxldGljcyBhbmQgRml0Ym9kIHVzZSBhbGdvcml0aG1zIHRvIGFkanVzdCB0cmFpbmluZyBwbGFucyBpbiByZWFsLXRpbWUsIG1ha2luZyBleGVyY2lzZSBtb3JlIGVmZmVjdGl2ZSBhbmQgZW5nYWdpbmcuIEEgc3R1ZHkgYnkgTWNLaW5zZXkgcmV2ZWFsZWQgdGhhdCA3MCUgb2YgdXNlcnMgcHJlZmVyIHBlcnNvbmFsaXplZCB0cmFpbmluZyBwcm9ncmFtcy4gIFxuXG4zLiAqKkhvbGlzdGljIFdlbGwtQmVpbmcgYW5kIE1lbnRhbCBGaXRuZXNzKiogIFxuICAgSW4gMjAyNCwgbWVudGFsIHdlbGwtYmVpbmcgaGFzIGJlY29tZSBhIHByaW9yaXR5IGluIHRoZSBmaXRuZXNzIHdvcmxkLiBQcmFjdGljZXMgc3VjaCBhcyB5b2dhLCBtZWRpdGF0aW9uLCBhbmQgUGlsYXRlcyBhcmUgbm93IGludGVncmFsIHBhcnRzIG9mIHRyYWluaW5nIHByb2dyYW1zLiBBIHJlcG9ydCBmcm9tIE1pbmRib2R5IGluZGljYXRlcyB0aGF0IDg1JSBvZiBjb25zdW1lcnMgdmlldyBtZW50YWwgaGVhbHRoIGFzIGVzc2VudGlhbCB0byB0aGVpciBvdmVyYWxsIHdlbGwtYmVpbmcuICBcblxuNC4gKipWaXJ0dWFsIEZpdG5lc3MgYW5kIE9ubGluZSBDb21tdW5pdGllcyoqICBcbiAgIFRoZSBwYW5kZW1pYyBhY2NlbGVyYXRlZCB0aGUgc2hpZnQgdG93YXJkcyB2aXJ0dWFsIHdvcmtvdXRzLiBJbiAyMDI0LCBvbmxpbmUgZml0bmVzcyBwbGF0Zm9ybXMgbGlrZSBQZWxvdG9uIGFuZCBad2lmdCBjb250aW51ZSB0byB0aHJpdmUsIHdpdGggYSA1MCUgaW5jcmVhc2UgaW4gcGFydGljaXBhdGlvbiBpbiBsaXZlIGNsYXNzZXMgY29tcGFyZWQgdG8gMjAyMC4gVmlydHVhbCBjb21tdW5pdGllcyBlbmFibGUgdXNlcnMgdG8gY29ubmVjdCwgc2hhcmUgcHJvZ3Jlc3MsIGFuZCBtb3RpdmF0ZSBlYWNoIG90aGVyLiAgXG5cbjUuICoqRm9jdXMgb24gU3VzdGFpbmFiaWxpdHkgYW5kIEVjby1GcmllbmRseSBGaXRuZXNzKiogIFxuICAgR3Jvd2luZyBhd2FyZW5lc3Mgb2YgZW52aXJvbm1lbnRhbCBpbXBhY3QgaGFzIGxlZCB0byBhIGRlbWFuZCBmb3Igc3VzdGFpbmFibGUgZml0bmVzcyBwcm9kdWN0cy4gQ29uc3VtZXJzIGFyZSBzZWVraW5nIGJyYW5kcyB0aGF0IGFkb3B0IGVjby1mcmllbmRseSBwcmFjdGljZXMuIEFjY29yZGluZyB0byBhIHJlcG9ydCBieSBFdXJvbW9uaXRvciwgNDAlIG9mIGNvbnN1bWVycyBhcmUgd2lsbGluZyB0byBwYXkgbW9yZSBmb3Igc3VzdGFpbmFibGUgZml0bmVzcyBlcXVpcG1lbnQuICBcblxuNi4gKipJbmNsdXNpdmUgRml0bmVzcyBQcm9ncmFtcyoqICBcbiAgIEluY2x1c2l2aXR5IGlzIGF0IHRoZSBmb3JlZnJvbnQgb2YgbmV3IHRyZW5kcy4gRml0bmVzcyBzdHVkaW9zIGFuZCBhcHBzIGFyZSB3b3JraW5nIHRvIGNyZWF0ZSB3ZWxjb21pbmcgZW52aXJvbm1lbnRzIGZvciBldmVyeW9uZSwgcmVnYXJkbGVzcyBvZiBzaXplLCBhZ2UsIG9yIGZpdG5lc3MgbGV2ZWwuIFRoaXMgdHJlbmQgaXMgc3VwcG9ydGVkIGJ5IGEgc3R1ZHkgZnJvbSB0aGUgTmF0aW9uYWwgQWNhZGVteSBvZiBTcG9ydHMgTWVkaWNpbmUsIHdoaWNoIGZvdW5kIHRoYXQgNjclIG9mIHJlc3BvbmRlbnRzIGZlZWwgbW9yZSBtb3RpdmF0ZWQgaW4gaW5jbHVzaXZlIHNldHRpbmdzLiAgXG5cbjcuICoqTWljcm8tV29ya291dHMgYW5kIEZsZXhpYmlsaXR5KiogIFxuICAgTWljcm8td29ya291dHMsIHR5cGljYWxseSBsYXN0aW5nIGJldHdlZW4gMTAgdG8gMjAgbWludXRlcywgYXJlIGdhaW5pbmcgcG9wdWxhcml0eS4gVGhpcyBmbGV4aWJsZSBhcHByb2FjaCBhbGxvd3MgdXNlcnMgdG8gZml0IGZpdG5lc3MgaW50byB0aGVpciBidXN5IHNjaGVkdWxlcy4gQSBzdXJ2ZXkgYnkgdGhlIEFtZXJpY2FuIENvbGxlZ2Ugb2YgU3BvcnRzIE1lZGljaW5lIGZvdW5kIHRoYXQgNjAlIG9mIHJlc3BvbmRlbnRzIHByZWZlciBzaG9ydCwgZWZmZWN0aXZlIHdvcmtvdXQgc2Vzc2lvbnMuICBcblxuKipDb25jbHVzaW9uKiogIFxuVGhlIGZpdG5lc3MgdHJlbmRzIG9mIDIwMjQgZW1waGFzaXplIHRoZSBpbXBvcnRhbmNlIG9mIHRlY2hub2xvZ3ksIHBlcnNvbmFsaXphdGlvbiwgbWVudGFsIHdlbGwtYmVpbmcsIHN1c3RhaW5hYmlsaXR5LCBhbmQgaW5jbHVzaXZpdHkuIENvbnN1bWVycyBhcmUgc2Vla2luZyBmaXRuZXNzIHNvbHV0aW9ucyB0aGF0IGVhc2lseSBpbnRlZ3JhdGUgaW50byB0aGVpciBkYWlseSBsaXZlcyB3aGlsZSBtZWV0aW5nIHRoZWlyIHVuaXF1ZSBuZWVkcy4gVGhlc2UgdHJlbmRzIGFyZSBzaGFwaW5nIHRoZSBmdXR1cmUgb2YgZml0bmVzcywgbWFraW5nIGV4ZXJjaXNlIG1vcmUgYWNjZXNzaWJsZSBhbmQgZW5qb3lhYmxlIGZvciBhbGwuICBcblxuKipSZWZlcmVuY2VzOioqICBcbi0gR3JhbmQgVmlldyBSZXNlYXJjaC4gKDIwMjMpLiBXZWFyYWJsZSBUZWNobm9sb2d5IE1hcmtldCBTaXplLiAgXG4tIE1jS2luc2V5ICYgQ29tcGFueS4gKDIwMjMpLiBUaGUgRnV0dXJlIG9mIEZpdG5lc3M6IFBlcnNvbmFsaXphdGlvbiBhbmQgQUkuICBcbi0gTWluZGJvZHkuICgyMDIzKS4gV2VsbG5lc3MgVHJlbmRzIFJlcG9ydC4gIFxuLSBTdGF0aXN0YS4gKDIwMjMpLiBPbmxpbmUgRml0bmVzcyBQYXJ0aWNpcGF0aW9uIFRyZW5kcy4gIFxuLSBFdXJvbW9uaXRvciBJbnRlcm5hdGlvbmFsLiAoMjAyMykuIFN1c3RhaW5hYmxlIEZpdG5lc3MgTWFya2V0IFJlc2VhcmNoLiAgXG4tIE5hdGlvbmFsIEFjYWRlbXkgb2YgU3BvcnRzIE1lZGljaW5lIChOQVNNKS4gKDIwMjMpLiBJbmNsdXNpdml0eSBpbiBGaXRuZXNzLiAgXG4tIEFtZXJpY2FuIENvbGxlZ2Ugb2YgU3BvcnRzIE1lZGljaW5lIChBQ1NNKS4gKDIwMjMpLiBNaWNyby1Xb3Jrb3V0czogTmV3IFRyZW5kcyBpbiBGaXRuZXNzLiAgXG5cbi0tLVxuXG4jIExlcyBEZXJuaVx1MDBlOHJlcyBUZW5kYW5jZXMgZHUgRml0bmVzcyBlbiAyMDI0ICBcblxuQWxvcnMgcXVlIG5vdXMgZW50cm9ucyBlbiAyMDI0LCBsZSBwYXlzYWdlIGR1IGZpdG5lc3MgXHUwMGU5dm9sdWUgXHUwMGUwIHVuIHJ5dGhtZSBzYW5zIHByXHUwMGU5Y1x1MDBlOWRlbnQuIFZvaWNpIGxlcyBwcmluY2lwYWxlcyB0ZW5kYW5jZXMgXHUwMGUwIHN1cnZlaWxsZXIgOiAgXG5cbjEuICoqSW50XHUwMGU5Z3JhdGlvbiBkZSBsYSBUZWNobm9sb2dpZSBldCBkZXMgQXBwYXJlaWxzIENvbm5lY3RcdTAwZTlzKiogIFxuICAgTGEgdGVjaG5vbG9naWUgcmVzdGUgYXUgY1x1MDE1M3VyIGR1IGZpdG5lc3MuIExlcyBtb250cmVzIGludGVsbGlnZW50ZXMgZXQgbGVzIHRyYWNrZXJzIGQnYWN0aXZpdFx1MDBlOSBkZXZpZW5uZW50IGRlIHBsdXMgZW4gcGx1cyBzb3BoaXN0aXF1XHUwMGU5cy4gU2Vsb24gdW4gcmFwcG9ydCBkZSBHcmFuZCBWaWV3IFJlc2VhcmNoLCBsZSBtYXJjaFx1MDBlOSBkZXMgd2VhcmFibGVzIGRldnJhaXQgYXR0ZWluZHJlIDEwMCBtaWxsaWFyZHMgZGUgZG9sbGFycyBkJ2ljaSAyMDI0LCBhdmVjIHVuZSBjcm9pc3NhbmNlIHNpZ25pZmljYXRpdmUgZGVzIGFwcGxpY2F0aW9ucyBkZSBmaXRuZXNzIGV0IGRlcyBwbGF0ZWZvcm1lcyBkZSBjb2FjaGluZyBlbiBsaWduZS4gIFxuXG4yLiAqKkVudHJhXHUwMGVlbmVtZW50IFBlcnNvbm5hbGlzXHUwMGU5IGV0IFByb2dyYW1tZXMgZCdJQSoqICBcbiAgIEwnaW50ZWxsaWdlbmNlIGFydGlmaWNpZWxsZSBlc3QgdXRpbGlzXHUwMGU5ZSBwb3VyIGNyXHUwMGU5ZXIgZGVzIHByb2dyYW1tZXMgZCdlbnRyYVx1MDBlZW5lbWVudCBwZXJzb25uYWxpc1x1MDBlOXMgYWRhcHRcdTAwZTlzIGF1eCBiZXNvaW5zIGluZGl2aWR1ZWxzLiBEZXMgcGxhdGVmb3JtZXMgY29tbWUgRnJlZWxldGljcyBldCBGaXRib2QgdXRpbGlzZW50IGRlcyBhbGdvcml0aG1lcyBwb3VyIGFqdXN0ZXIgbGVzIHBsYW5zIGQnZW50cmFcdTAwZWVuZW1lbnQgZW4gdGVtcHMgclx1MDBlOWVsLCByZW5kYW50IGwnZXhlcmNpY2UgcGx1cyBlZmZpY2FjZSBldCBlbmdhZ2VhbnQuIFVuZSBcdTAwZTl0dWRlIGRlIE1jS2luc2V5IGEgclx1MDBlOXZcdTAwZTlsXHUwMGU5IHF1ZSA3MCUgZGVzIHV0aWxpc2F0ZXVycyBwclx1MDBlOWZcdTAwZThyZW50IGxlcyBwcm9ncmFtbWVzIGQnZW50cmFcdTAwZWVuZW1lbnQgcGVyc29ubmFsaXNcdTAwZTlzLiAgXG5cbjMuICoqQmllbi1cdTAwZWF0cmUgSG9saXN0aXF1ZSBldCBGaXRuZXNzIE1lbnRhbCoqICBcbiAgIEVuIDIwMjQsIGxlIGJpZW4tXHUwMGVhdHJlIG1lbnRhbCBlc3QgZGV2ZW51IHVuZSBwcmlvcml0XHUwMGU5IGRhbnMgbGUgbW9uZGUgZHUgZml0bmVzcy4gRGVzIHByYXRpcXVlcyBjb21tZSBsZSB5b2dhLCBsYSBtXHUwMGU5ZGl0YXRpb24gZXQgbGUgUGlsYXRlcyBzb250IGRcdTAwZTlzb3JtYWlzIGRlcyBwYXJ0aWVzIGludFx1MDBlOWdyYW50ZXMgZGVzIHByb2dyYW1tZXMgZCdlbnRyYVx1MDBlZW5lbWVudC4gVW4gcmFwcG9ydCBkZSBNaW5kYm9keSBpbmRpcXVlIHF1ZSA4NSUgZGVzIGNvbnNvbW1hdGV1cnMgY29uc2lkXHUwMGU4cmVudCBsYSBzYW50XHUwMGU5IG1lbnRhbGUgY29tbWUgZXNzZW50aWVsbGUgXHUwMGUwIGxldXIgYmllbi1cdTAwZWF0cmUgZ2xvYmFsLiAgXG5cbjQuICoqRml0bmVzcyBWaXJ0dWVsIGV0IENvbW11bmF1dFx1MDBlOXMgZW4gTGlnbmUqKiAgXG4gICBMYSBwYW5kXHUwMGU5bWllIGEgYWNjXHUwMGU5bFx1MDBlOXJcdTAwZTkgbGEgdGVuZGFuY2UgdmVycyBsZXMgc1x1MDBlOWFuY2VzIGQnZW50cmFcdTAwZWVuZW1lbnQgdmlydHVlbGxlcy4gRW4gMjAyNCwgbGVzIHBsYXRlZm9ybWVzIGRlIGZpdG5lc3MgZW4gbGlnbmUgY29tbWUgUGVsb3RvbiBldCBad2lmdCBjb250aW51ZW50IGRlIHByb3NwXHUwMGU5cmVyLCBhdmVjIHVuZSBhdWdtZW50YXRpb24gZGUgNTAlIGRlIGxhIHBhcnRpY2lwYXRpb24gXHUwMGUwIGRlcyBjb3VycyBlbiBkaXJlY3QgcGFyIHJhcHBvcnQgXHUwMGUwIDIwMjAuIExlcyBjb21tdW5hdXRcdTAwZTlzIHZpcnR1ZWxsZXMgcGVybWV0dGVudCBhdXggdXRpbGlzYXRldXJzIGRlIHNlIGNvbm5lY3RlciwgZGUgcGFydGFnZXIgbGV1cnMgcHJvZ3JcdTAwZThzIGV0IGRlIHNlIG1vdGl2ZXIgbXV0dWVsbGVtZW50LiAgXG5cbjUuICoqRm9jdXMgc3VyIGxhIER1cmFiaWxpdFx1MDBlOSBldCBsZSBGaXRuZXNzIFx1MDBjOWNvbG9naXF1ZSoqICBcbiAgIFVuZSBzZW5zaWJpbGlzYXRpb24gY3JvaXNzYW50ZSBcdTAwZTAgbCdpbXBhY3QgZW52aXJvbm5lbWVudGFsIGEgY29uZHVpdCBcdTAwZTAgdW5lIGRlbWFuZGUgcG91ciBkZXMgcHJvZHVpdHMgZGUgZml0bmVzcyBkdXJhYmxlcy4gTGVzIGNvbnNvbW1hdGV1cnMgcmVjaGVyY2hlbnQgZGVzIG1hcnF1ZXMgcXVpIGFkb3B0ZW50IGRlcyBwcmF0aXF1ZXMgcmVzcGVjdHVldXNlcyBkZSBsJ2Vudmlyb25uZW1lbnQuIFNlbG9uIHVuIHJhcHBvcnQgZCdFdXJvbW9uaXRvciwgNDAlIGRlcyBjb25zb21tYXRldXJzIHNvbnQgcHJcdTAwZWF0cyBcdTAwZTAgcGF5ZXIgcGx1cyBwb3VyIGRlcyBcdTAwZTlxdWlwZW1lbnRzIGRlIGZpdG5lc3MgZHVyYWJsZXMuICBcblxuNi4gKipQcm9ncmFtbWVzIGRlIEZpdG5lc3MgSW5jbHVzaWZzKiogIFxuICAgTCdpbmNsdXNpdml0XHUwMGU5IGVzdCBhdSBjXHUwMTUzdXIgZGVzIG5vdXZlbGxlcyB0ZW5kYW5jZXMuIExlcyBzdHVkaW9zIGV0IGxlcyBhcHBsaWNhdGlvbnMgZGUgZml0bmVzcyBzJ2VmZm9yY2VudCBkZSBjclx1MDBlOWVyIGRlcyBlbnZpcm9ubmVtZW50cyBhY2N1ZWlsbGFudHMgcG91ciB0b3VzLCBpbmRcdTAwZTlwZW5kYW1tZW50IGRlIGxhIHRhaWxsZSwgZGUgbCdcdTAwZTJnZSBvdSBkZSBsJ2FwdGl0dWRlIHBoeXNpcXVlLiBDZXR0ZSB0ZW5kYW5jZSBlc3Qgc291dGVudWUgcGFyIHVuZSBcdTAwZTl0dWRlIGRlIGxhIE5hdGlvbmFsIEFjYWRlbXkgb2YgU3BvcnRzIE1lZGljaW5lLCBxdWkgc291bGlnbmUgcXVlIDY3JSBkZXMgcGVyc29ubmVzIGludGVycm9nXHUwMGU5ZXMgc2Ugc2VudGVudCBwbHVzIG1vdGl2XHUwMGU5ZXMgZGFucyB1biBlbnZpcm9ubmVtZW50IGluY2x1c2lmLiAgXG5cbjcuICoqTWljcm8tRW50cmFcdTAwZWVuZW1lbnRzIGV0IEZsZXhpYmlsaXRcdTAwZTkqKiAgXG4gICBMZXMgbWljcm8tZW50cmFcdTAwZWVuZW1lbnRzLCBxdWkgZHVyZW50IGdcdTAwZTluXHUwMGU5cmFsZW1lbnQgZW50cmUgMTAgZXQgMjAgbWludXRlcywgZ2FnbmVudCBlbiBwb3B1bGFyaXRcdTAwZTkuIENldHRlIGFwcHJvY2hlIGZsZXhpYmxlIHBlcm1ldCBhdXggdXRpbGlzYXRldXJzIGQnaW50XHUwMGU5Z3JlciBsZSBmaXRuZXNzIGRhbnMgbGV1ciBlbXBsb2kgZHUgdGVtcHMgY2hhcmdcdTAwZTkuIFVuZSBlbnF1XHUwMGVhdGUgbWVuXHUwMGU5ZSBwYXIgbCdBbWVyaWNhbiBDb2xsZWdlIG9mIFNwb3J0cyBNZWRpY2luZSBhIG1vbnRyXHUwMGU5IHF1ZSA2MCUgZGVzIHJcdTAwZTlwb25kYW50cyBwclx1MDBlOWZcdTAwZThyZW50IGRlcyBzXHUwMGU5YW5jZXMgZCdleGVyY2ljZSBjb3VydGVzIGV0IGVmZmljYWNlcy4gIFxuXG4qKkNvbmNsdXNpb24qKiAgXG5MZXMgdGVuZGFuY2VzIGZpdG5lc3MgZGUgMjAyNCBzb3VsaWduZW50IGwnaW1wb3J0YW5jZSBkZSBsYSB0ZWNobm9sb2dpZSwgZGUgbGEgcGVyc29ubmFsaXNhdGlvbiwgZHUgYmllbi1cdTAwZWF0cmUgbWVudGFsLCBkZSBsYSBkdXJhYmlsaXRcdTAwZTkgZXQgZGUgbCdpbmNsdXNpdml0XHUwMGU5LiBMZXMgY29uc29tbWF0ZXVycyByZWNoZXJjaGVudCBkZXMgc29sdXRpb25zIGRlIGZpdG5lc3MgcXVpIHMnaW50XHUwMGU4Z3JlbnQgZmFjaWxlbWVudCBkYW5zIGxldXIgdmllIHF1b3RpZGllbm5lIHRvdXQgZW4gclx1MDBlOXBvbmRhbnQgXHUwMGUwIGxldXJzIGJlc29pbnMgdW5pcXVlcy4gQ2VzIHRlbmRhbmNlcyBmYVx1MDBlN29ubmVudCBsJ2F2ZW5pciBkdSBmaXRuZXNzLCByZW5kYW50IGwnZXhlcmNpY2UgcGx1cyBhY2Nlc3NpYmxlIGV0IGFnclx1MDBlOWFibGUgcG91ciB0b3VzLiAgXG5cbioqUlx1MDBlOWZcdTAwZTlyZW5jZXMgOioqICBcbi0gR3JhbmQgVmlldyBSZXNlYXJjaC4gKDIwMjMpLiBXZWFyYWJsZSBUZWNobm9sb2d5IE1hcmtldCBTaXplLiAgXG4tIE1jS2luc2V5ICYgQ29tcGFueS4gKDIwMjMpLiBUaGUgRnV0dXJlIG9mIEZpdG5lc3M6IFBlcnNvbmFsaXphdGlvbiBhbmQgQUkuICBcbi0gTWluZGJvZHkuICgyMDIzKS4gV2VsbG5lc3MgVHJlbmRzIFJlcG9ydC4gIFxuLSBTdGF0aXN0YS4gKDIwMjMpLiBPbmxpbmUgRml0bmVzcyBQYXJ0aWNpcGF0aW9uIFRyZW5kcy4gIFxuLSBFdXJvbW9uaXRvciBJbnRlcm5hdGlvbmFsLiAoMjAyMykuIFN1c3RhaW5hYmxlIEZpdG5lc3MgTWFya2V0IFJlc2VhcmNoLiAgXG4tIE5hdGlvbmFsIEFjYWRlbXkgb2YgU3BvcnRzIE1lZGljaW5lIChOQVNNKS4gKDIwMjMpLiBJbmNsdXNpdml0eSBpbiBGaXRuZXNzLiAgXG4tIEFtZXJpY2FuIENvbGxlZ2Ugb2YgU3BvcnRzIE1lZGljaW5lIChBQ1NNKS4gKDIwMjMpLiBNaWNyby1Xb3Jrb3V0czogTmV3IFRyZW5kcyBpbiBGaXRuZXNzLiIsCiAgICAgICAgICAiZnJlbmNoIjogIiIKICAgICAgICB9LAogICAgICAgICJjcmVhdGVkIjogIjIwMjUwMjA5XzIwMzEwNiIsCiAgICAgICAgImZpbGVuYW1lIjogImxpbmtlZGluX3Bvc3RfMjAyNTAyMDlfMjAzMTA2Lm1kIiwKICAgICAgICAidG9waWMiOiAiTGVzIGRlcm5pXHUwMGU4cmUgdGVuZGFuY2VzIGR1IEZpdG5lc3MgZW4gMjAyNCIKICAgICAgfQogICAgXQogIH0sCiAgInN0YXR1cyI6ICJzdWNjZXNzIgp9Cg==","status":200,"url":"http://localhost:8002/api/linkedin/list"},"revalidate":31536000,"tags":[]}
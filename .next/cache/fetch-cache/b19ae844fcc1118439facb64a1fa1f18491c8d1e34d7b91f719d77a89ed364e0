{"kind":"FETCH","data":{"headers":{"access-control-allow-origin":"*","connection":"close","content-length":"15249","content-type":"application/json","date":"Thu, 20 Feb 2025 11:23:43 GMT","server":"Werkzeug/3.1.3 Python/3.11.4"},"body":"","status":200,"url":"http://localhost:8001/api/newsletter/list"},"revalidate":31536000,"tags":[]}